
project-pov-fan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d50  08002d50  000203d0  2**0
                  CONTENTS
  4 .ARM          00000000  08002d50  08002d50  000203d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d50  08002d50  000203d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d0  20000000  08002d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200003d0  08003128  000203d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08003128  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aa7  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000139f  00000000  00000000  00027e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00029240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  00029810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f0ae  00000000  00000000  00029d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ef8  00000000  00000000  00038e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005abb6  00000000  00000000  00040d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009b8c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000145c  00000000  00000000  0009b918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003d0 	.word	0x200003d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bc0 	.word	0x08002bc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003d4 	.word	0x200003d4
 8000104:	08002bc0 	.word	0x08002bc0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fa2a 	bl	8000680 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 f9d5 	bl	80005e0 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f807 	bl	8000250 <__aeabi_fsub>
 8000242:	f000 f9cd 	bl	80005e0 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fsub>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	4646      	mov	r6, r8
 8000254:	46d6      	mov	lr, sl
 8000256:	464f      	mov	r7, r9
 8000258:	0243      	lsls	r3, r0, #9
 800025a:	0a5b      	lsrs	r3, r3, #9
 800025c:	00da      	lsls	r2, r3, #3
 800025e:	4694      	mov	ip, r2
 8000260:	024a      	lsls	r2, r1, #9
 8000262:	b5c0      	push	{r6, r7, lr}
 8000264:	0044      	lsls	r4, r0, #1
 8000266:	0a56      	lsrs	r6, r2, #9
 8000268:	1c05      	adds	r5, r0, #0
 800026a:	46b0      	mov	r8, r6
 800026c:	0e24      	lsrs	r4, r4, #24
 800026e:	004e      	lsls	r6, r1, #1
 8000270:	0992      	lsrs	r2, r2, #6
 8000272:	001f      	movs	r7, r3
 8000274:	0020      	movs	r0, r4
 8000276:	4692      	mov	sl, r2
 8000278:	0fed      	lsrs	r5, r5, #31
 800027a:	0e36      	lsrs	r6, r6, #24
 800027c:	0fc9      	lsrs	r1, r1, #31
 800027e:	2eff      	cmp	r6, #255	; 0xff
 8000280:	d100      	bne.n	8000284 <__aeabi_fsub+0x34>
 8000282:	e07f      	b.n	8000384 <__aeabi_fsub+0x134>
 8000284:	2201      	movs	r2, #1
 8000286:	4051      	eors	r1, r2
 8000288:	428d      	cmp	r5, r1
 800028a:	d051      	beq.n	8000330 <__aeabi_fsub+0xe0>
 800028c:	1ba2      	subs	r2, r4, r6
 800028e:	4691      	mov	r9, r2
 8000290:	2a00      	cmp	r2, #0
 8000292:	dc00      	bgt.n	8000296 <__aeabi_fsub+0x46>
 8000294:	e07e      	b.n	8000394 <__aeabi_fsub+0x144>
 8000296:	2e00      	cmp	r6, #0
 8000298:	d100      	bne.n	800029c <__aeabi_fsub+0x4c>
 800029a:	e099      	b.n	80003d0 <__aeabi_fsub+0x180>
 800029c:	2cff      	cmp	r4, #255	; 0xff
 800029e:	d100      	bne.n	80002a2 <__aeabi_fsub+0x52>
 80002a0:	e08c      	b.n	80003bc <__aeabi_fsub+0x16c>
 80002a2:	2380      	movs	r3, #128	; 0x80
 80002a4:	4652      	mov	r2, sl
 80002a6:	04db      	lsls	r3, r3, #19
 80002a8:	431a      	orrs	r2, r3
 80002aa:	4692      	mov	sl, r2
 80002ac:	464a      	mov	r2, r9
 80002ae:	2301      	movs	r3, #1
 80002b0:	2a1b      	cmp	r2, #27
 80002b2:	dc08      	bgt.n	80002c6 <__aeabi_fsub+0x76>
 80002b4:	4653      	mov	r3, sl
 80002b6:	2120      	movs	r1, #32
 80002b8:	40d3      	lsrs	r3, r2
 80002ba:	1a89      	subs	r1, r1, r2
 80002bc:	4652      	mov	r2, sl
 80002be:	408a      	lsls	r2, r1
 80002c0:	1e51      	subs	r1, r2, #1
 80002c2:	418a      	sbcs	r2, r1
 80002c4:	4313      	orrs	r3, r2
 80002c6:	4662      	mov	r2, ip
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	015a      	lsls	r2, r3, #5
 80002cc:	d400      	bmi.n	80002d0 <__aeabi_fsub+0x80>
 80002ce:	e0f3      	b.n	80004b8 <__aeabi_fsub+0x268>
 80002d0:	019b      	lsls	r3, r3, #6
 80002d2:	099e      	lsrs	r6, r3, #6
 80002d4:	0030      	movs	r0, r6
 80002d6:	f000 f9dd 	bl	8000694 <__clzsi2>
 80002da:	3805      	subs	r0, #5
 80002dc:	4086      	lsls	r6, r0
 80002de:	4284      	cmp	r4, r0
 80002e0:	dd00      	ble.n	80002e4 <__aeabi_fsub+0x94>
 80002e2:	e0f7      	b.n	80004d4 <__aeabi_fsub+0x284>
 80002e4:	0032      	movs	r2, r6
 80002e6:	1b04      	subs	r4, r0, r4
 80002e8:	2020      	movs	r0, #32
 80002ea:	3401      	adds	r4, #1
 80002ec:	40e2      	lsrs	r2, r4
 80002ee:	1b04      	subs	r4, r0, r4
 80002f0:	40a6      	lsls	r6, r4
 80002f2:	0033      	movs	r3, r6
 80002f4:	1e5e      	subs	r6, r3, #1
 80002f6:	41b3      	sbcs	r3, r6
 80002f8:	2400      	movs	r4, #0
 80002fa:	4313      	orrs	r3, r2
 80002fc:	075a      	lsls	r2, r3, #29
 80002fe:	d004      	beq.n	800030a <__aeabi_fsub+0xba>
 8000300:	220f      	movs	r2, #15
 8000302:	401a      	ands	r2, r3
 8000304:	2a04      	cmp	r2, #4
 8000306:	d000      	beq.n	800030a <__aeabi_fsub+0xba>
 8000308:	3304      	adds	r3, #4
 800030a:	015a      	lsls	r2, r3, #5
 800030c:	d400      	bmi.n	8000310 <__aeabi_fsub+0xc0>
 800030e:	e0d6      	b.n	80004be <__aeabi_fsub+0x26e>
 8000310:	1c62      	adds	r2, r4, #1
 8000312:	2cfe      	cmp	r4, #254	; 0xfe
 8000314:	d100      	bne.n	8000318 <__aeabi_fsub+0xc8>
 8000316:	e0da      	b.n	80004ce <__aeabi_fsub+0x27e>
 8000318:	019b      	lsls	r3, r3, #6
 800031a:	0a5f      	lsrs	r7, r3, #9
 800031c:	b2d0      	uxtb	r0, r2
 800031e:	05c0      	lsls	r0, r0, #23
 8000320:	4338      	orrs	r0, r7
 8000322:	07ed      	lsls	r5, r5, #31
 8000324:	4328      	orrs	r0, r5
 8000326:	bce0      	pop	{r5, r6, r7}
 8000328:	46ba      	mov	sl, r7
 800032a:	46b1      	mov	r9, r6
 800032c:	46a8      	mov	r8, r5
 800032e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000330:	1ba2      	subs	r2, r4, r6
 8000332:	4691      	mov	r9, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	dd63      	ble.n	8000400 <__aeabi_fsub+0x1b0>
 8000338:	2e00      	cmp	r6, #0
 800033a:	d100      	bne.n	800033e <__aeabi_fsub+0xee>
 800033c:	e099      	b.n	8000472 <__aeabi_fsub+0x222>
 800033e:	2cff      	cmp	r4, #255	; 0xff
 8000340:	d03c      	beq.n	80003bc <__aeabi_fsub+0x16c>
 8000342:	2380      	movs	r3, #128	; 0x80
 8000344:	4652      	mov	r2, sl
 8000346:	04db      	lsls	r3, r3, #19
 8000348:	431a      	orrs	r2, r3
 800034a:	4692      	mov	sl, r2
 800034c:	464a      	mov	r2, r9
 800034e:	2301      	movs	r3, #1
 8000350:	2a1b      	cmp	r2, #27
 8000352:	dc08      	bgt.n	8000366 <__aeabi_fsub+0x116>
 8000354:	4653      	mov	r3, sl
 8000356:	2120      	movs	r1, #32
 8000358:	40d3      	lsrs	r3, r2
 800035a:	1a89      	subs	r1, r1, r2
 800035c:	4652      	mov	r2, sl
 800035e:	408a      	lsls	r2, r1
 8000360:	1e51      	subs	r1, r2, #1
 8000362:	418a      	sbcs	r2, r1
 8000364:	4313      	orrs	r3, r2
 8000366:	4463      	add	r3, ip
 8000368:	015a      	lsls	r2, r3, #5
 800036a:	d400      	bmi.n	800036e <__aeabi_fsub+0x11e>
 800036c:	e0a4      	b.n	80004b8 <__aeabi_fsub+0x268>
 800036e:	3401      	adds	r4, #1
 8000370:	2cff      	cmp	r4, #255	; 0xff
 8000372:	d100      	bne.n	8000376 <__aeabi_fsub+0x126>
 8000374:	e0ab      	b.n	80004ce <__aeabi_fsub+0x27e>
 8000376:	2201      	movs	r2, #1
 8000378:	4997      	ldr	r1, [pc, #604]	; (80005d8 <__aeabi_fsub+0x388>)
 800037a:	401a      	ands	r2, r3
 800037c:	085b      	lsrs	r3, r3, #1
 800037e:	400b      	ands	r3, r1
 8000380:	4313      	orrs	r3, r2
 8000382:	e7bb      	b.n	80002fc <__aeabi_fsub+0xac>
 8000384:	2a00      	cmp	r2, #0
 8000386:	d032      	beq.n	80003ee <__aeabi_fsub+0x19e>
 8000388:	428d      	cmp	r5, r1
 800038a:	d035      	beq.n	80003f8 <__aeabi_fsub+0x1a8>
 800038c:	22ff      	movs	r2, #255	; 0xff
 800038e:	4252      	negs	r2, r2
 8000390:	4691      	mov	r9, r2
 8000392:	44a1      	add	r9, r4
 8000394:	464a      	mov	r2, r9
 8000396:	2a00      	cmp	r2, #0
 8000398:	d051      	beq.n	800043e <__aeabi_fsub+0x1ee>
 800039a:	1b30      	subs	r0, r6, r4
 800039c:	2c00      	cmp	r4, #0
 800039e:	d000      	beq.n	80003a2 <__aeabi_fsub+0x152>
 80003a0:	e09c      	b.n	80004dc <__aeabi_fsub+0x28c>
 80003a2:	4663      	mov	r3, ip
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d100      	bne.n	80003aa <__aeabi_fsub+0x15a>
 80003a8:	e0df      	b.n	800056a <__aeabi_fsub+0x31a>
 80003aa:	3801      	subs	r0, #1
 80003ac:	2800      	cmp	r0, #0
 80003ae:	d100      	bne.n	80003b2 <__aeabi_fsub+0x162>
 80003b0:	e0f7      	b.n	80005a2 <__aeabi_fsub+0x352>
 80003b2:	2eff      	cmp	r6, #255	; 0xff
 80003b4:	d000      	beq.n	80003b8 <__aeabi_fsub+0x168>
 80003b6:	e099      	b.n	80004ec <__aeabi_fsub+0x29c>
 80003b8:	000d      	movs	r5, r1
 80003ba:	4643      	mov	r3, r8
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d100      	bne.n	80003c2 <__aeabi_fsub+0x172>
 80003c0:	e085      	b.n	80004ce <__aeabi_fsub+0x27e>
 80003c2:	2780      	movs	r7, #128	; 0x80
 80003c4:	03ff      	lsls	r7, r7, #15
 80003c6:	431f      	orrs	r7, r3
 80003c8:	027f      	lsls	r7, r7, #9
 80003ca:	20ff      	movs	r0, #255	; 0xff
 80003cc:	0a7f      	lsrs	r7, r7, #9
 80003ce:	e7a6      	b.n	800031e <__aeabi_fsub+0xce>
 80003d0:	4652      	mov	r2, sl
 80003d2:	2a00      	cmp	r2, #0
 80003d4:	d074      	beq.n	80004c0 <__aeabi_fsub+0x270>
 80003d6:	2201      	movs	r2, #1
 80003d8:	4252      	negs	r2, r2
 80003da:	4690      	mov	r8, r2
 80003dc:	44c1      	add	r9, r8
 80003de:	464a      	mov	r2, r9
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	d100      	bne.n	80003e6 <__aeabi_fsub+0x196>
 80003e4:	e0c8      	b.n	8000578 <__aeabi_fsub+0x328>
 80003e6:	2cff      	cmp	r4, #255	; 0xff
 80003e8:	d000      	beq.n	80003ec <__aeabi_fsub+0x19c>
 80003ea:	e75f      	b.n	80002ac <__aeabi_fsub+0x5c>
 80003ec:	e7e6      	b.n	80003bc <__aeabi_fsub+0x16c>
 80003ee:	2201      	movs	r2, #1
 80003f0:	4051      	eors	r1, r2
 80003f2:	42a9      	cmp	r1, r5
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fsub+0x1a8>
 80003f6:	e749      	b.n	800028c <__aeabi_fsub+0x3c>
 80003f8:	22ff      	movs	r2, #255	; 0xff
 80003fa:	4252      	negs	r2, r2
 80003fc:	4691      	mov	r9, r2
 80003fe:	44a1      	add	r9, r4
 8000400:	464a      	mov	r2, r9
 8000402:	2a00      	cmp	r2, #0
 8000404:	d043      	beq.n	800048e <__aeabi_fsub+0x23e>
 8000406:	1b31      	subs	r1, r6, r4
 8000408:	2c00      	cmp	r4, #0
 800040a:	d100      	bne.n	800040e <__aeabi_fsub+0x1be>
 800040c:	e08c      	b.n	8000528 <__aeabi_fsub+0x2d8>
 800040e:	2eff      	cmp	r6, #255	; 0xff
 8000410:	d100      	bne.n	8000414 <__aeabi_fsub+0x1c4>
 8000412:	e092      	b.n	800053a <__aeabi_fsub+0x2ea>
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	4662      	mov	r2, ip
 8000418:	04db      	lsls	r3, r3, #19
 800041a:	431a      	orrs	r2, r3
 800041c:	4694      	mov	ip, r2
 800041e:	2301      	movs	r3, #1
 8000420:	291b      	cmp	r1, #27
 8000422:	dc09      	bgt.n	8000438 <__aeabi_fsub+0x1e8>
 8000424:	2020      	movs	r0, #32
 8000426:	4663      	mov	r3, ip
 8000428:	4662      	mov	r2, ip
 800042a:	40cb      	lsrs	r3, r1
 800042c:	1a41      	subs	r1, r0, r1
 800042e:	408a      	lsls	r2, r1
 8000430:	0011      	movs	r1, r2
 8000432:	1e48      	subs	r0, r1, #1
 8000434:	4181      	sbcs	r1, r0
 8000436:	430b      	orrs	r3, r1
 8000438:	0034      	movs	r4, r6
 800043a:	4453      	add	r3, sl
 800043c:	e794      	b.n	8000368 <__aeabi_fsub+0x118>
 800043e:	22fe      	movs	r2, #254	; 0xfe
 8000440:	1c66      	adds	r6, r4, #1
 8000442:	4232      	tst	r2, r6
 8000444:	d164      	bne.n	8000510 <__aeabi_fsub+0x2c0>
 8000446:	2c00      	cmp	r4, #0
 8000448:	d000      	beq.n	800044c <__aeabi_fsub+0x1fc>
 800044a:	e082      	b.n	8000552 <__aeabi_fsub+0x302>
 800044c:	4663      	mov	r3, ip
 800044e:	2b00      	cmp	r3, #0
 8000450:	d100      	bne.n	8000454 <__aeabi_fsub+0x204>
 8000452:	e0ab      	b.n	80005ac <__aeabi_fsub+0x35c>
 8000454:	4653      	mov	r3, sl
 8000456:	2b00      	cmp	r3, #0
 8000458:	d100      	bne.n	800045c <__aeabi_fsub+0x20c>
 800045a:	e760      	b.n	800031e <__aeabi_fsub+0xce>
 800045c:	4663      	mov	r3, ip
 800045e:	4652      	mov	r2, sl
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	015a      	lsls	r2, r3, #5
 8000464:	d400      	bmi.n	8000468 <__aeabi_fsub+0x218>
 8000466:	e0aa      	b.n	80005be <__aeabi_fsub+0x36e>
 8000468:	4663      	mov	r3, ip
 800046a:	4652      	mov	r2, sl
 800046c:	000d      	movs	r5, r1
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	e744      	b.n	80002fc <__aeabi_fsub+0xac>
 8000472:	4652      	mov	r2, sl
 8000474:	2a00      	cmp	r2, #0
 8000476:	d023      	beq.n	80004c0 <__aeabi_fsub+0x270>
 8000478:	2201      	movs	r2, #1
 800047a:	4252      	negs	r2, r2
 800047c:	4690      	mov	r8, r2
 800047e:	44c1      	add	r9, r8
 8000480:	464a      	mov	r2, r9
 8000482:	2a00      	cmp	r2, #0
 8000484:	d075      	beq.n	8000572 <__aeabi_fsub+0x322>
 8000486:	2cff      	cmp	r4, #255	; 0xff
 8000488:	d000      	beq.n	800048c <__aeabi_fsub+0x23c>
 800048a:	e75f      	b.n	800034c <__aeabi_fsub+0xfc>
 800048c:	e796      	b.n	80003bc <__aeabi_fsub+0x16c>
 800048e:	26fe      	movs	r6, #254	; 0xfe
 8000490:	3401      	adds	r4, #1
 8000492:	4226      	tst	r6, r4
 8000494:	d153      	bne.n	800053e <__aeabi_fsub+0x2ee>
 8000496:	2800      	cmp	r0, #0
 8000498:	d172      	bne.n	8000580 <__aeabi_fsub+0x330>
 800049a:	4663      	mov	r3, ip
 800049c:	2b00      	cmp	r3, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_fsub+0x252>
 80004a0:	e093      	b.n	80005ca <__aeabi_fsub+0x37a>
 80004a2:	4653      	mov	r3, sl
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_fsub+0x25a>
 80004a8:	e739      	b.n	800031e <__aeabi_fsub+0xce>
 80004aa:	4463      	add	r3, ip
 80004ac:	2400      	movs	r4, #0
 80004ae:	015a      	lsls	r2, r3, #5
 80004b0:	d502      	bpl.n	80004b8 <__aeabi_fsub+0x268>
 80004b2:	4a4a      	ldr	r2, [pc, #296]	; (80005dc <__aeabi_fsub+0x38c>)
 80004b4:	3401      	adds	r4, #1
 80004b6:	4013      	ands	r3, r2
 80004b8:	075a      	lsls	r2, r3, #29
 80004ba:	d000      	beq.n	80004be <__aeabi_fsub+0x26e>
 80004bc:	e720      	b.n	8000300 <__aeabi_fsub+0xb0>
 80004be:	08db      	lsrs	r3, r3, #3
 80004c0:	2cff      	cmp	r4, #255	; 0xff
 80004c2:	d100      	bne.n	80004c6 <__aeabi_fsub+0x276>
 80004c4:	e77a      	b.n	80003bc <__aeabi_fsub+0x16c>
 80004c6:	025b      	lsls	r3, r3, #9
 80004c8:	0a5f      	lsrs	r7, r3, #9
 80004ca:	b2e0      	uxtb	r0, r4
 80004cc:	e727      	b.n	800031e <__aeabi_fsub+0xce>
 80004ce:	20ff      	movs	r0, #255	; 0xff
 80004d0:	2700      	movs	r7, #0
 80004d2:	e724      	b.n	800031e <__aeabi_fsub+0xce>
 80004d4:	4b41      	ldr	r3, [pc, #260]	; (80005dc <__aeabi_fsub+0x38c>)
 80004d6:	1a24      	subs	r4, r4, r0
 80004d8:	4033      	ands	r3, r6
 80004da:	e70f      	b.n	80002fc <__aeabi_fsub+0xac>
 80004dc:	2eff      	cmp	r6, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fsub+0x292>
 80004e0:	e76a      	b.n	80003b8 <__aeabi_fsub+0x168>
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	4662      	mov	r2, ip
 80004e6:	04db      	lsls	r3, r3, #19
 80004e8:	431a      	orrs	r2, r3
 80004ea:	4694      	mov	ip, r2
 80004ec:	2301      	movs	r3, #1
 80004ee:	281b      	cmp	r0, #27
 80004f0:	dc09      	bgt.n	8000506 <__aeabi_fsub+0x2b6>
 80004f2:	2420      	movs	r4, #32
 80004f4:	4663      	mov	r3, ip
 80004f6:	4662      	mov	r2, ip
 80004f8:	40c3      	lsrs	r3, r0
 80004fa:	1a20      	subs	r0, r4, r0
 80004fc:	4082      	lsls	r2, r0
 80004fe:	0010      	movs	r0, r2
 8000500:	1e44      	subs	r4, r0, #1
 8000502:	41a0      	sbcs	r0, r4
 8000504:	4303      	orrs	r3, r0
 8000506:	4652      	mov	r2, sl
 8000508:	000d      	movs	r5, r1
 800050a:	0034      	movs	r4, r6
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	e6dc      	b.n	80002ca <__aeabi_fsub+0x7a>
 8000510:	4663      	mov	r3, ip
 8000512:	4652      	mov	r2, sl
 8000514:	1a9e      	subs	r6, r3, r2
 8000516:	0173      	lsls	r3, r6, #5
 8000518:	d417      	bmi.n	800054a <__aeabi_fsub+0x2fa>
 800051a:	2e00      	cmp	r6, #0
 800051c:	d000      	beq.n	8000520 <__aeabi_fsub+0x2d0>
 800051e:	e6d9      	b.n	80002d4 <__aeabi_fsub+0x84>
 8000520:	2500      	movs	r5, #0
 8000522:	2000      	movs	r0, #0
 8000524:	2700      	movs	r7, #0
 8000526:	e6fa      	b.n	800031e <__aeabi_fsub+0xce>
 8000528:	4663      	mov	r3, ip
 800052a:	2b00      	cmp	r3, #0
 800052c:	d044      	beq.n	80005b8 <__aeabi_fsub+0x368>
 800052e:	3901      	subs	r1, #1
 8000530:	2900      	cmp	r1, #0
 8000532:	d04c      	beq.n	80005ce <__aeabi_fsub+0x37e>
 8000534:	2eff      	cmp	r6, #255	; 0xff
 8000536:	d000      	beq.n	800053a <__aeabi_fsub+0x2ea>
 8000538:	e771      	b.n	800041e <__aeabi_fsub+0x1ce>
 800053a:	4643      	mov	r3, r8
 800053c:	e73e      	b.n	80003bc <__aeabi_fsub+0x16c>
 800053e:	2cff      	cmp	r4, #255	; 0xff
 8000540:	d0c5      	beq.n	80004ce <__aeabi_fsub+0x27e>
 8000542:	4652      	mov	r2, sl
 8000544:	4462      	add	r2, ip
 8000546:	0853      	lsrs	r3, r2, #1
 8000548:	e7b6      	b.n	80004b8 <__aeabi_fsub+0x268>
 800054a:	4663      	mov	r3, ip
 800054c:	000d      	movs	r5, r1
 800054e:	1ad6      	subs	r6, r2, r3
 8000550:	e6c0      	b.n	80002d4 <__aeabi_fsub+0x84>
 8000552:	4662      	mov	r2, ip
 8000554:	2a00      	cmp	r2, #0
 8000556:	d116      	bne.n	8000586 <__aeabi_fsub+0x336>
 8000558:	4653      	mov	r3, sl
 800055a:	2b00      	cmp	r3, #0
 800055c:	d000      	beq.n	8000560 <__aeabi_fsub+0x310>
 800055e:	e72b      	b.n	80003b8 <__aeabi_fsub+0x168>
 8000560:	2780      	movs	r7, #128	; 0x80
 8000562:	2500      	movs	r5, #0
 8000564:	20ff      	movs	r0, #255	; 0xff
 8000566:	03ff      	lsls	r7, r7, #15
 8000568:	e6d9      	b.n	800031e <__aeabi_fsub+0xce>
 800056a:	000d      	movs	r5, r1
 800056c:	4643      	mov	r3, r8
 800056e:	0034      	movs	r4, r6
 8000570:	e7a6      	b.n	80004c0 <__aeabi_fsub+0x270>
 8000572:	4653      	mov	r3, sl
 8000574:	4463      	add	r3, ip
 8000576:	e6f7      	b.n	8000368 <__aeabi_fsub+0x118>
 8000578:	4663      	mov	r3, ip
 800057a:	4652      	mov	r2, sl
 800057c:	1a9b      	subs	r3, r3, r2
 800057e:	e6a4      	b.n	80002ca <__aeabi_fsub+0x7a>
 8000580:	4662      	mov	r2, ip
 8000582:	2a00      	cmp	r2, #0
 8000584:	d0d9      	beq.n	800053a <__aeabi_fsub+0x2ea>
 8000586:	4652      	mov	r2, sl
 8000588:	2a00      	cmp	r2, #0
 800058a:	d100      	bne.n	800058e <__aeabi_fsub+0x33e>
 800058c:	e716      	b.n	80003bc <__aeabi_fsub+0x16c>
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	03d2      	lsls	r2, r2, #15
 8000592:	4213      	tst	r3, r2
 8000594:	d100      	bne.n	8000598 <__aeabi_fsub+0x348>
 8000596:	e711      	b.n	80003bc <__aeabi_fsub+0x16c>
 8000598:	4640      	mov	r0, r8
 800059a:	4210      	tst	r0, r2
 800059c:	d000      	beq.n	80005a0 <__aeabi_fsub+0x350>
 800059e:	e70d      	b.n	80003bc <__aeabi_fsub+0x16c>
 80005a0:	e70a      	b.n	80003b8 <__aeabi_fsub+0x168>
 80005a2:	4652      	mov	r2, sl
 80005a4:	000d      	movs	r5, r1
 80005a6:	0034      	movs	r4, r6
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	e68e      	b.n	80002ca <__aeabi_fsub+0x7a>
 80005ac:	4653      	mov	r3, sl
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <__aeabi_fsub+0x374>
 80005b2:	000d      	movs	r5, r1
 80005b4:	4647      	mov	r7, r8
 80005b6:	e6b2      	b.n	800031e <__aeabi_fsub+0xce>
 80005b8:	4643      	mov	r3, r8
 80005ba:	0034      	movs	r4, r6
 80005bc:	e780      	b.n	80004c0 <__aeabi_fsub+0x270>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d000      	beq.n	80005c4 <__aeabi_fsub+0x374>
 80005c2:	e779      	b.n	80004b8 <__aeabi_fsub+0x268>
 80005c4:	2500      	movs	r5, #0
 80005c6:	2700      	movs	r7, #0
 80005c8:	e6a9      	b.n	800031e <__aeabi_fsub+0xce>
 80005ca:	4647      	mov	r7, r8
 80005cc:	e6a7      	b.n	800031e <__aeabi_fsub+0xce>
 80005ce:	4653      	mov	r3, sl
 80005d0:	0034      	movs	r4, r6
 80005d2:	4463      	add	r3, ip
 80005d4:	e6c8      	b.n	8000368 <__aeabi_fsub+0x118>
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	7dffffff 	.word	0x7dffffff
 80005dc:	fbffffff 	.word	0xfbffffff

080005e0 <__aeabi_f2iz>:
 80005e0:	0241      	lsls	r1, r0, #9
 80005e2:	0042      	lsls	r2, r0, #1
 80005e4:	0fc3      	lsrs	r3, r0, #31
 80005e6:	0a49      	lsrs	r1, r1, #9
 80005e8:	2000      	movs	r0, #0
 80005ea:	0e12      	lsrs	r2, r2, #24
 80005ec:	2a7e      	cmp	r2, #126	; 0x7e
 80005ee:	d903      	bls.n	80005f8 <__aeabi_f2iz+0x18>
 80005f0:	2a9d      	cmp	r2, #157	; 0x9d
 80005f2:	d902      	bls.n	80005fa <__aeabi_f2iz+0x1a>
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <__aeabi_f2iz+0x3c>)
 80005f6:	1898      	adds	r0, r3, r2
 80005f8:	4770      	bx	lr
 80005fa:	2080      	movs	r0, #128	; 0x80
 80005fc:	0400      	lsls	r0, r0, #16
 80005fe:	4301      	orrs	r1, r0
 8000600:	2a95      	cmp	r2, #149	; 0x95
 8000602:	dc07      	bgt.n	8000614 <__aeabi_f2iz+0x34>
 8000604:	2096      	movs	r0, #150	; 0x96
 8000606:	1a82      	subs	r2, r0, r2
 8000608:	40d1      	lsrs	r1, r2
 800060a:	4248      	negs	r0, r1
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f3      	bne.n	80005f8 <__aeabi_f2iz+0x18>
 8000610:	0008      	movs	r0, r1
 8000612:	e7f1      	b.n	80005f8 <__aeabi_f2iz+0x18>
 8000614:	3a96      	subs	r2, #150	; 0x96
 8000616:	4091      	lsls	r1, r2
 8000618:	e7f7      	b.n	800060a <__aeabi_f2iz+0x2a>
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	7fffffff 	.word	0x7fffffff

08000620 <__aeabi_cfrcmple>:
 8000620:	4684      	mov	ip, r0
 8000622:	1c08      	adds	r0, r1, #0
 8000624:	4661      	mov	r1, ip
 8000626:	e7ff      	b.n	8000628 <__aeabi_cfcmpeq>

08000628 <__aeabi_cfcmpeq>:
 8000628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800062a:	f000 f8c5 	bl	80007b8 <__lesf2>
 800062e:	2800      	cmp	r0, #0
 8000630:	d401      	bmi.n	8000636 <__aeabi_cfcmpeq+0xe>
 8000632:	2100      	movs	r1, #0
 8000634:	42c8      	cmn	r0, r1
 8000636:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000638 <__aeabi_fcmpeq>:
 8000638:	b510      	push	{r4, lr}
 800063a:	f000 f849 	bl	80006d0 <__eqsf2>
 800063e:	4240      	negs	r0, r0
 8000640:	3001      	adds	r0, #1
 8000642:	bd10      	pop	{r4, pc}

08000644 <__aeabi_fcmplt>:
 8000644:	b510      	push	{r4, lr}
 8000646:	f000 f8b7 	bl	80007b8 <__lesf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	db01      	blt.n	8000652 <__aeabi_fcmplt+0xe>
 800064e:	2000      	movs	r0, #0
 8000650:	bd10      	pop	{r4, pc}
 8000652:	2001      	movs	r0, #1
 8000654:	bd10      	pop	{r4, pc}
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__aeabi_fcmple>:
 8000658:	b510      	push	{r4, lr}
 800065a:	f000 f8ad 	bl	80007b8 <__lesf2>
 800065e:	2800      	cmp	r0, #0
 8000660:	dd01      	ble.n	8000666 <__aeabi_fcmple+0xe>
 8000662:	2000      	movs	r0, #0
 8000664:	bd10      	pop	{r4, pc}
 8000666:	2001      	movs	r0, #1
 8000668:	bd10      	pop	{r4, pc}
 800066a:	46c0      	nop			; (mov r8, r8)

0800066c <__aeabi_fcmpgt>:
 800066c:	b510      	push	{r4, lr}
 800066e:	f000 f857 	bl	8000720 <__gesf2>
 8000672:	2800      	cmp	r0, #0
 8000674:	dc01      	bgt.n	800067a <__aeabi_fcmpgt+0xe>
 8000676:	2000      	movs	r0, #0
 8000678:	bd10      	pop	{r4, pc}
 800067a:	2001      	movs	r0, #1
 800067c:	bd10      	pop	{r4, pc}
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_fcmpge>:
 8000680:	b510      	push	{r4, lr}
 8000682:	f000 f84d 	bl	8000720 <__gesf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	da01      	bge.n	800068e <__aeabi_fcmpge+0xe>
 800068a:	2000      	movs	r0, #0
 800068c:	bd10      	pop	{r4, pc}
 800068e:	2001      	movs	r0, #1
 8000690:	bd10      	pop	{r4, pc}
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <__clzsi2>:
 8000694:	211c      	movs	r1, #28
 8000696:	2301      	movs	r3, #1
 8000698:	041b      	lsls	r3, r3, #16
 800069a:	4298      	cmp	r0, r3
 800069c:	d301      	bcc.n	80006a2 <__clzsi2+0xe>
 800069e:	0c00      	lsrs	r0, r0, #16
 80006a0:	3910      	subs	r1, #16
 80006a2:	0a1b      	lsrs	r3, r3, #8
 80006a4:	4298      	cmp	r0, r3
 80006a6:	d301      	bcc.n	80006ac <__clzsi2+0x18>
 80006a8:	0a00      	lsrs	r0, r0, #8
 80006aa:	3908      	subs	r1, #8
 80006ac:	091b      	lsrs	r3, r3, #4
 80006ae:	4298      	cmp	r0, r3
 80006b0:	d301      	bcc.n	80006b6 <__clzsi2+0x22>
 80006b2:	0900      	lsrs	r0, r0, #4
 80006b4:	3904      	subs	r1, #4
 80006b6:	a202      	add	r2, pc, #8	; (adr r2, 80006c0 <__clzsi2+0x2c>)
 80006b8:	5c10      	ldrb	r0, [r2, r0]
 80006ba:	1840      	adds	r0, r0, r1
 80006bc:	4770      	bx	lr
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	02020304 	.word	0x02020304
 80006c4:	01010101 	.word	0x01010101
	...

080006d0 <__eqsf2>:
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	0042      	lsls	r2, r0, #1
 80006d4:	024e      	lsls	r6, r1, #9
 80006d6:	004c      	lsls	r4, r1, #1
 80006d8:	0245      	lsls	r5, r0, #9
 80006da:	0a6d      	lsrs	r5, r5, #9
 80006dc:	0e12      	lsrs	r2, r2, #24
 80006de:	0fc3      	lsrs	r3, r0, #31
 80006e0:	0a76      	lsrs	r6, r6, #9
 80006e2:	0e24      	lsrs	r4, r4, #24
 80006e4:	0fc9      	lsrs	r1, r1, #31
 80006e6:	2aff      	cmp	r2, #255	; 0xff
 80006e8:	d00f      	beq.n	800070a <__eqsf2+0x3a>
 80006ea:	2cff      	cmp	r4, #255	; 0xff
 80006ec:	d011      	beq.n	8000712 <__eqsf2+0x42>
 80006ee:	2001      	movs	r0, #1
 80006f0:	42a2      	cmp	r2, r4
 80006f2:	d000      	beq.n	80006f6 <__eqsf2+0x26>
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	42b5      	cmp	r5, r6
 80006f8:	d1fc      	bne.n	80006f4 <__eqsf2+0x24>
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d00d      	beq.n	800071a <__eqsf2+0x4a>
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d1f8      	bne.n	80006f4 <__eqsf2+0x24>
 8000702:	0028      	movs	r0, r5
 8000704:	1e45      	subs	r5, r0, #1
 8000706:	41a8      	sbcs	r0, r5
 8000708:	e7f4      	b.n	80006f4 <__eqsf2+0x24>
 800070a:	2001      	movs	r0, #1
 800070c:	2d00      	cmp	r5, #0
 800070e:	d1f1      	bne.n	80006f4 <__eqsf2+0x24>
 8000710:	e7eb      	b.n	80006ea <__eqsf2+0x1a>
 8000712:	2001      	movs	r0, #1
 8000714:	2e00      	cmp	r6, #0
 8000716:	d1ed      	bne.n	80006f4 <__eqsf2+0x24>
 8000718:	e7e9      	b.n	80006ee <__eqsf2+0x1e>
 800071a:	2000      	movs	r0, #0
 800071c:	e7ea      	b.n	80006f4 <__eqsf2+0x24>
 800071e:	46c0      	nop			; (mov r8, r8)

08000720 <__gesf2>:
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000722:	0042      	lsls	r2, r0, #1
 8000724:	0246      	lsls	r6, r0, #9
 8000726:	024d      	lsls	r5, r1, #9
 8000728:	004c      	lsls	r4, r1, #1
 800072a:	0fc3      	lsrs	r3, r0, #31
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0a6d      	lsrs	r5, r5, #9
 8000732:	0e24      	lsrs	r4, r4, #24
 8000734:	0fc8      	lsrs	r0, r1, #31
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d01f      	beq.n	800077a <__gesf2+0x5a>
 800073a:	2cff      	cmp	r4, #255	; 0xff
 800073c:	d010      	beq.n	8000760 <__gesf2+0x40>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d11f      	bne.n	8000782 <__gesf2+0x62>
 8000742:	4271      	negs	r1, r6
 8000744:	4171      	adcs	r1, r6
 8000746:	2c00      	cmp	r4, #0
 8000748:	d101      	bne.n	800074e <__gesf2+0x2e>
 800074a:	2d00      	cmp	r5, #0
 800074c:	d01e      	beq.n	800078c <__gesf2+0x6c>
 800074e:	2900      	cmp	r1, #0
 8000750:	d10e      	bne.n	8000770 <__gesf2+0x50>
 8000752:	4283      	cmp	r3, r0
 8000754:	d01e      	beq.n	8000794 <__gesf2+0x74>
 8000756:	2102      	movs	r1, #2
 8000758:	1e58      	subs	r0, r3, #1
 800075a:	4008      	ands	r0, r1
 800075c:	3801      	subs	r0, #1
 800075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000760:	2d00      	cmp	r5, #0
 8000762:	d126      	bne.n	80007b2 <__gesf2+0x92>
 8000764:	2a00      	cmp	r2, #0
 8000766:	d1f4      	bne.n	8000752 <__gesf2+0x32>
 8000768:	4271      	negs	r1, r6
 800076a:	4171      	adcs	r1, r6
 800076c:	2900      	cmp	r1, #0
 800076e:	d0f0      	beq.n	8000752 <__gesf2+0x32>
 8000770:	2800      	cmp	r0, #0
 8000772:	d1f4      	bne.n	800075e <__gesf2+0x3e>
 8000774:	2001      	movs	r0, #1
 8000776:	4240      	negs	r0, r0
 8000778:	e7f1      	b.n	800075e <__gesf2+0x3e>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d119      	bne.n	80007b2 <__gesf2+0x92>
 800077e:	2cff      	cmp	r4, #255	; 0xff
 8000780:	d0ee      	beq.n	8000760 <__gesf2+0x40>
 8000782:	2c00      	cmp	r4, #0
 8000784:	d1e5      	bne.n	8000752 <__gesf2+0x32>
 8000786:	2d00      	cmp	r5, #0
 8000788:	d1e3      	bne.n	8000752 <__gesf2+0x32>
 800078a:	e7e4      	b.n	8000756 <__gesf2+0x36>
 800078c:	2000      	movs	r0, #0
 800078e:	2e00      	cmp	r6, #0
 8000790:	d0e5      	beq.n	800075e <__gesf2+0x3e>
 8000792:	e7e0      	b.n	8000756 <__gesf2+0x36>
 8000794:	42a2      	cmp	r2, r4
 8000796:	dc05      	bgt.n	80007a4 <__gesf2+0x84>
 8000798:	dbea      	blt.n	8000770 <__gesf2+0x50>
 800079a:	42ae      	cmp	r6, r5
 800079c:	d802      	bhi.n	80007a4 <__gesf2+0x84>
 800079e:	d3e7      	bcc.n	8000770 <__gesf2+0x50>
 80007a0:	2000      	movs	r0, #0
 80007a2:	e7dc      	b.n	800075e <__gesf2+0x3e>
 80007a4:	4241      	negs	r1, r0
 80007a6:	4141      	adcs	r1, r0
 80007a8:	4248      	negs	r0, r1
 80007aa:	2102      	movs	r1, #2
 80007ac:	4008      	ands	r0, r1
 80007ae:	3801      	subs	r0, #1
 80007b0:	e7d5      	b.n	800075e <__gesf2+0x3e>
 80007b2:	2002      	movs	r0, #2
 80007b4:	4240      	negs	r0, r0
 80007b6:	e7d2      	b.n	800075e <__gesf2+0x3e>

080007b8 <__lesf2>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0246      	lsls	r6, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	004c      	lsls	r4, r1, #1
 80007c2:	0fc3      	lsrs	r3, r0, #31
 80007c4:	0a76      	lsrs	r6, r6, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e24      	lsrs	r4, r4, #24
 80007cc:	0fc8      	lsrs	r0, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d00d      	beq.n	80007ee <__lesf2+0x36>
 80007d2:	2cff      	cmp	r4, #255	; 0xff
 80007d4:	d00f      	beq.n	80007f6 <__lesf2+0x3e>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d123      	bne.n	8000822 <__lesf2+0x6a>
 80007da:	4271      	negs	r1, r6
 80007dc:	4171      	adcs	r1, r6
 80007de:	2c00      	cmp	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__lesf2+0x4a>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d10d      	bne.n	8000802 <__lesf2+0x4a>
 80007e6:	2000      	movs	r0, #0
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d014      	beq.n	8000816 <__lesf2+0x5e>
 80007ec:	e00d      	b.n	800080a <__lesf2+0x52>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d110      	bne.n	8000814 <__lesf2+0x5c>
 80007f2:	2cff      	cmp	r4, #255	; 0xff
 80007f4:	d115      	bne.n	8000822 <__lesf2+0x6a>
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	d10c      	bne.n	8000814 <__lesf2+0x5c>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d103      	bne.n	8000806 <__lesf2+0x4e>
 80007fe:	4271      	negs	r1, r6
 8000800:	4171      	adcs	r1, r6
 8000802:	2900      	cmp	r1, #0
 8000804:	d108      	bne.n	8000818 <__lesf2+0x60>
 8000806:	4283      	cmp	r3, r0
 8000808:	d010      	beq.n	800082c <__lesf2+0x74>
 800080a:	2102      	movs	r1, #2
 800080c:	1e58      	subs	r0, r3, #1
 800080e:	4008      	ands	r0, r1
 8000810:	3801      	subs	r0, #1
 8000812:	e000      	b.n	8000816 <__lesf2+0x5e>
 8000814:	2002      	movs	r0, #2
 8000816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000818:	2800      	cmp	r0, #0
 800081a:	d1fc      	bne.n	8000816 <__lesf2+0x5e>
 800081c:	2001      	movs	r0, #1
 800081e:	4240      	negs	r0, r0
 8000820:	e7f9      	b.n	8000816 <__lesf2+0x5e>
 8000822:	2c00      	cmp	r4, #0
 8000824:	d1ef      	bne.n	8000806 <__lesf2+0x4e>
 8000826:	2d00      	cmp	r5, #0
 8000828:	d1ed      	bne.n	8000806 <__lesf2+0x4e>
 800082a:	e7ee      	b.n	800080a <__lesf2+0x52>
 800082c:	42a2      	cmp	r2, r4
 800082e:	dc05      	bgt.n	800083c <__lesf2+0x84>
 8000830:	dbf2      	blt.n	8000818 <__lesf2+0x60>
 8000832:	42ae      	cmp	r6, r5
 8000834:	d802      	bhi.n	800083c <__lesf2+0x84>
 8000836:	d3ef      	bcc.n	8000818 <__lesf2+0x60>
 8000838:	2000      	movs	r0, #0
 800083a:	e7ec      	b.n	8000816 <__lesf2+0x5e>
 800083c:	4241      	negs	r1, r0
 800083e:	4141      	adcs	r1, r0
 8000840:	4248      	negs	r0, r1
 8000842:	2102      	movs	r1, #2
 8000844:	4008      	ands	r0, r1
 8000846:	3801      	subs	r0, #1
 8000848:	e7e5      	b.n	8000816 <__lesf2+0x5e>
 800084a:	46c0      	nop			; (mov r8, r8)

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 fe50 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f807 	bl	8000866 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f88c 	bl	8000974 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800085c:	f000 f85a 	bl	8000914 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000860:	f000 fd58 	bl	8001314 <loop>
 8000864:	e7fc      	b.n	8000860 <main+0x14>

08000866 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000866:	b590      	push	{r4, r7, lr}
 8000868:	b095      	sub	sp, #84	; 0x54
 800086a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086c:	2420      	movs	r4, #32
 800086e:	193b      	adds	r3, r7, r4
 8000870:	0018      	movs	r0, r3
 8000872:	2330      	movs	r3, #48	; 0x30
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f002 f99a 	bl	8002bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	2310      	movs	r3, #16
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	0018      	movs	r0, r3
 8000882:	2310      	movs	r3, #16
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f002 f992 	bl	8002bb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800088c:	003b      	movs	r3, r7
 800088e:	0018      	movs	r0, r3
 8000890:	2310      	movs	r3, #16
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f002 f98b 	bl	8002bb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2202      	movs	r2, #2
 80008a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2210      	movs	r2, #16
 80008ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 f8de 	bl	8001a78 <HAL_RCC_OscConfig>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80008c0:	f000 f8f4 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	2110      	movs	r1, #16
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2100      	movs	r1, #0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 fbe2 	bl	80020ac <HAL_RCC_ClockConfig>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008ec:	f000 f8de 	bl	8000aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008f0:	003b      	movs	r3, r7
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008f6:	003b      	movs	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fc:	003b      	movs	r3, r7
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fd26 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000908:	f000 f8d0 	bl	8000aac <Error_Handler>
  }
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b015      	add	sp, #84	; 0x54
 8000912:	bd90      	pop	{r4, r7, pc}

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART1_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART1_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000920:	2296      	movs	r2, #150	; 0x96
 8000922:	0212      	lsls	r2, r2, #8
 8000924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART1_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART1_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART1_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000958:	0018      	movs	r0, r3
 800095a:	f001 fdc7 	bl	80024ec <HAL_UART_Init>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f8a3 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000048c 	.word	0x2000048c
 8000970:	40013800 	.word	0x40013800

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	240c      	movs	r4, #12
 800097c:	193b      	adds	r3, r7, r4
 800097e:	0018      	movs	r0, r3
 8000980:	2314      	movs	r3, #20
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f002 f913 	bl	8002bb0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	03c9      	lsls	r1, r1, #15
 8000994:	430a      	orrs	r2, r1
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	03db      	lsls	r3, r3, #15
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0289      	lsls	r1, r1, #10
 80009b0:	430a      	orrs	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	029b      	lsls	r3, r3, #10
 80009bc:	4013      	ands	r3, r2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	02c9      	lsls	r1, r1, #11
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	02db      	lsls	r3, r3, #11
 80009d8:	4013      	ands	r3, r2
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <MX_GPIO_Init+0x130>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 f829 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_GPIO_Init+0x134>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	21c3      	movs	r1, #195	; 0xc3
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 f823 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80009f6:	23c8      	movs	r3, #200	; 0xc8
 80009f8:	0159      	lsls	r1, r3, #5
 80009fa:	2390      	movs	r3, #144	; 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2200      	movs	r2, #0
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 f81b 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2202      	movs	r2, #2
 8000a0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	2201      	movs	r2, #1
 8000a10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0x130>)
 8000a22:	0019      	movs	r1, r3
 8000a24:	0010      	movs	r0, r2
 8000a26:	f000 fea1 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	22c3      	movs	r2, #195	; 0xc3
 8000a2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2201      	movs	r2, #1
 8000a34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <MX_GPIO_Init+0x134>)
 8000a46:	0019      	movs	r1, r3
 8000a48:	0010      	movs	r0, r2
 8000a4a:	f000 fe8f 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a4e:	0021      	movs	r1, r4
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	22c8      	movs	r2, #200	; 0xc8
 8000a54:	0152      	lsls	r2, r2, #5
 8000a56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	000c      	movs	r4, r1
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	193a      	adds	r2, r7, r4
 8000a6e:	2390      	movs	r3, #144	; 0x90
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fe79 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2208      	movs	r2, #8
 8000a7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <MX_GPIO_Init+0x134>)
 8000a90:	0019      	movs	r1, r3
 8000a92:	0010      	movs	r0, r2
 8000a94:	f000 fe6a 	bl	800176c <HAL_GPIO_Init>

}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b009      	add	sp, #36	; 0x24
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48001400 	.word	0x48001400
 8000aa8:	48000400 	.word	0x48000400

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <printLetter>:

  }
  /* USER CODE END Error_Handler_Debug */
}
void printLetter(int letter[])
 {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 int y;
 // printing the first y row of the letter
 for (y=0; y<8; y++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	e0ac      	b.n	8000c20 <printLetter+0x168>
 {
	 if(letter[y]){
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	18d3      	adds	r3, r2, r3
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d04d      	beq.n	8000b70 <printLetter+0xb8>
		 switch(y % 8)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4ad9      	ldr	r2, [pc, #868]	; (8000e3c <printLetter+0x384>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	d504      	bpl.n	8000ae6 <printLetter+0x2e>
 8000adc:	3b01      	subs	r3, #1
 8000ade:	2208      	movs	r2, #8
 8000ae0:	4252      	negs	r2, r2
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d900      	bls.n	8000aec <printLetter+0x34>
 8000aea:	e096      	b.n	8000c1a <printLetter+0x162>
 8000aec:	009a      	lsls	r2, r3, #2
 8000aee:	4bd4      	ldr	r3, [pc, #848]	; (8000e40 <printLetter+0x388>)
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	469f      	mov	pc, r3
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000af6:	2380      	movs	r3, #128	; 0x80
 8000af8:	0159      	lsls	r1, r3, #5
 8000afa:	2390      	movs	r3, #144	; 0x90
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	2201      	movs	r2, #1
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 ff9b 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000b06:	e088      	b.n	8000c1a <printLetter+0x162>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b08:	4bce      	ldr	r3, [pc, #824]	; (8000e44 <printLetter+0x38c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 ff94 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000b14:	e081      	b.n	8000c1a <printLetter+0x162>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b16:	4bcb      	ldr	r3, [pc, #812]	; (8000e44 <printLetter+0x38c>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 ff8d 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000b22:	e07a      	b.n	8000c1a <printLetter+0x162>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b24:	4bc7      	ldr	r3, [pc, #796]	; (8000e44 <printLetter+0x38c>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 ff86 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000b30:	e073      	b.n	8000c1a <printLetter+0x162>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000b32:	4bc4      	ldr	r3, [pc, #784]	; (8000e44 <printLetter+0x38c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	2102      	movs	r1, #2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 ff7f 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000b3e:	e06c      	b.n	8000c1a <printLetter+0x162>
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8000b40:	4bc1      	ldr	r3, [pc, #772]	; (8000e48 <printLetter+0x390>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	2102      	movs	r1, #2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 ff78 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000b4c:	e065      	b.n	8000c1a <printLetter+0x162>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	0059      	lsls	r1, r3, #1
 8000b52:	2390      	movs	r3, #144	; 0x90
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	2201      	movs	r2, #1
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 ff6f 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000b5e:	e05c      	b.n	8000c1a <printLetter+0x162>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	48b8      	ldr	r0, [pc, #736]	; (8000e48 <printLetter+0x390>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	0019      	movs	r1, r3
 8000b6a:	f000 ff67 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000b6e:	e054      	b.n	8000c1a <printLetter+0x162>
		 	 }
	 }
	 else if(!letter[y]){
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	18d3      	adds	r3, r2, r3
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14c      	bne.n	8000c18 <printLetter+0x160>
		 switch(y % 8)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4aae      	ldr	r2, [pc, #696]	; (8000e3c <printLetter+0x384>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	d504      	bpl.n	8000b90 <printLetter+0xd8>
 8000b86:	3b01      	subs	r3, #1
 8000b88:	2208      	movs	r2, #8
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	3301      	adds	r3, #1
 8000b90:	2b07      	cmp	r3, #7
 8000b92:	d842      	bhi.n	8000c1a <printLetter+0x162>
 8000b94:	009a      	lsls	r2, r3, #2
 8000b96:	4bad      	ldr	r3, [pc, #692]	; (8000e4c <printLetter+0x394>)
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	469f      	mov	pc, r3
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	0159      	lsls	r1, r3, #5
 8000ba2:	2390      	movs	r3, #144	; 0x90
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 ff47 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000bae:	e034      	b.n	8000c1a <printLetter+0x162>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bb0:	4ba4      	ldr	r3, [pc, #656]	; (8000e44 <printLetter+0x38c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 ff40 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000bbc:	e02d      	b.n	8000c1a <printLetter+0x162>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bbe:	4ba1      	ldr	r3, [pc, #644]	; (8000e44 <printLetter+0x38c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f000 ff39 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000bca:	e026      	b.n	8000c1a <printLetter+0x162>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bcc:	4b9d      	ldr	r3, [pc, #628]	; (8000e44 <printLetter+0x38c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 ff32 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000bd8:	e01f      	b.n	8000c1a <printLetter+0x162>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bda:	4b9a      	ldr	r3, [pc, #616]	; (8000e44 <printLetter+0x38c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2102      	movs	r1, #2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 ff2b 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000be6:	e018      	b.n	8000c1a <printLetter+0x162>
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000be8:	4b97      	ldr	r3, [pc, #604]	; (8000e48 <printLetter+0x390>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	2102      	movs	r1, #2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 ff24 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000bf4:	e011      	b.n	8000c1a <printLetter+0x162>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	0059      	lsls	r1, r3, #1
 8000bfa:	2390      	movs	r3, #144	; 0x90
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	2200      	movs	r2, #0
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 ff1b 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000c06:	e008      	b.n	8000c1a <printLetter+0x162>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	011b      	lsls	r3, r3, #4
 8000c0c:	488e      	ldr	r0, [pc, #568]	; (8000e48 <printLetter+0x390>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	0019      	movs	r1, r3
 8000c12:	f000 ff13 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000c16:	e000      	b.n	8000c1a <printLetter+0x162>
		 	 }
	 }
 8000c18:	46c0      	nop			; (mov r8, r8)
 for (y=0; y<8; y++)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b07      	cmp	r3, #7
 8000c24:	dc00      	bgt.n	8000c28 <printLetter+0x170>
 8000c26:	e74e      	b.n	8000ac6 <printLetter+0xe>
 }
 HAL_Delay(dotTime);
 8000c28:	4b89      	ldr	r3, [pc, #548]	; (8000e50 <printLetter+0x398>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	1c18      	adds	r0, r3, #0
 8000c2e:	f7ff faf7 	bl	8000220 <__aeabi_f2uiz>
 8000c32:	0003      	movs	r3, r0
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fcc1 	bl	80015bc <HAL_Delay>
// printing the second y row of the letter
 for (y=0; y<8; y++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	e0ae      	b.n	8000d9e <printLetter+0x2e6>
 {
	 if(letter[y + 8]){
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3308      	adds	r3, #8
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d04d      	beq.n	8000cec <printLetter+0x234>
		 switch(y % 8)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4a7a      	ldr	r2, [pc, #488]	; (8000e3c <printLetter+0x384>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	d504      	bpl.n	8000c62 <printLetter+0x1aa>
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	3301      	adds	r3, #1
 8000c62:	2b07      	cmp	r3, #7
 8000c64:	d900      	bls.n	8000c68 <printLetter+0x1b0>
 8000c66:	e097      	b.n	8000d98 <printLetter+0x2e0>
 8000c68:	009a      	lsls	r2, r3, #2
 8000c6a:	4b7a      	ldr	r3, [pc, #488]	; (8000e54 <printLetter+0x39c>)
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	469f      	mov	pc, r3
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	0159      	lsls	r1, r3, #5
 8000c76:	2390      	movs	r3, #144	; 0x90
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fedd 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000c82:	e089      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c84:	4b6f      	ldr	r3, [pc, #444]	; (8000e44 <printLetter+0x38c>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	2101      	movs	r1, #1
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 fed6 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000c90:	e082      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c92:	4b6c      	ldr	r3, [pc, #432]	; (8000e44 <printLetter+0x38c>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 fecf 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000c9e:	e07b      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ca0:	4b68      	ldr	r3, [pc, #416]	; (8000e44 <printLetter+0x38c>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 fec8 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000cac:	e074      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000cae:	4b65      	ldr	r3, [pc, #404]	; (8000e44 <printLetter+0x38c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f000 fec1 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000cba:	e06d      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8000cbc:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <printLetter+0x390>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 feba 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000cc8:	e066      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	0059      	lsls	r1, r3, #1
 8000cce:	2390      	movs	r3, #144	; 0x90
 8000cd0:	05db      	lsls	r3, r3, #23
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 feb1 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000cda:	e05d      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4859      	ldr	r0, [pc, #356]	; (8000e48 <printLetter+0x390>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	f000 fea9 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000cea:	e055      	b.n	8000d98 <printLetter+0x2e0>
		 	 }
	 }
	 else if(!letter[y + 8]){
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3308      	adds	r3, #8
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14c      	bne.n	8000d96 <printLetter+0x2de>
		 switch(y % 8)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4a4f      	ldr	r2, [pc, #316]	; (8000e3c <printLetter+0x384>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	d504      	bpl.n	8000d0e <printLetter+0x256>
 8000d04:	3b01      	subs	r3, #1
 8000d06:	2208      	movs	r2, #8
 8000d08:	4252      	negs	r2, r2
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	2b07      	cmp	r3, #7
 8000d10:	d842      	bhi.n	8000d98 <printLetter+0x2e0>
 8000d12:	009a      	lsls	r2, r3, #2
 8000d14:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <printLetter+0x3a0>)
 8000d16:	18d3      	adds	r3, r2, r3
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	469f      	mov	pc, r3
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	0159      	lsls	r1, r3, #5
 8000d20:	2390      	movs	r3, #144	; 0x90
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	2200      	movs	r2, #0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fe88 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000d2c:	e034      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d2e:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <printLetter+0x38c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fe81 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000d3a:	e02d      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d3c:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <printLetter+0x38c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 fe7a 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000d48:	e026      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d4a:	4b3e      	ldr	r3, [pc, #248]	; (8000e44 <printLetter+0x38c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 fe73 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000d56:	e01f      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <printLetter+0x38c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fe6c 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000d64:	e018      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <printLetter+0x390>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f000 fe65 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000d72:	e011      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	0059      	lsls	r1, r3, #1
 8000d78:	2390      	movs	r3, #144	; 0x90
 8000d7a:	05db      	lsls	r3, r3, #23
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 fe5c 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000d84:	e008      	b.n	8000d98 <printLetter+0x2e0>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	482f      	ldr	r0, [pc, #188]	; (8000e48 <printLetter+0x390>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0019      	movs	r1, r3
 8000d90:	f000 fe54 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000d94:	e000      	b.n	8000d98 <printLetter+0x2e0>
		 	 }
	 }
 8000d96:	46c0      	nop			; (mov r8, r8)
 for (y=0; y<8; y++)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b07      	cmp	r3, #7
 8000da2:	dc00      	bgt.n	8000da6 <printLetter+0x2ee>
 8000da4:	e74c      	b.n	8000c40 <printLetter+0x188>
 }
    HAL_Delay(dotTime);
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <printLetter+0x398>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1c18      	adds	r0, r3, #0
 8000dac:	f7ff fa38 	bl	8000220 <__aeabi_f2uiz>
 8000db0:	0003      	movs	r3, r0
 8000db2:	0018      	movs	r0, r3
 8000db4:	f000 fc02 	bl	80015bc <HAL_Delay>
// printing the third y row of the letter
 for (y=0; y<8; y++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	e0c1      	b.n	8000f42 <printLetter+0x48a>
 {
	 if(letter[y + 16]){
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3310      	adds	r3, #16
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	18d3      	adds	r3, r2, r3
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d060      	beq.n	8000e90 <printLetter+0x3d8>
		 switch(y % 8)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <printLetter+0x384>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d504      	bpl.n	8000de0 <printLetter+0x328>
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	2208      	movs	r2, #8
 8000dda:	4252      	negs	r2, r2
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	3301      	adds	r3, #1
 8000de0:	2b07      	cmp	r3, #7
 8000de2:	d900      	bls.n	8000de6 <printLetter+0x32e>
 8000de4:	e0aa      	b.n	8000f3c <printLetter+0x484>
 8000de6:	009a      	lsls	r2, r3, #2
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <printLetter+0x3a4>)
 8000dea:	18d3      	adds	r3, r2, r3
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	469f      	mov	pc, r3
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	0159      	lsls	r1, r3, #5
 8000df4:	2390      	movs	r3, #144	; 0x90
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	2201      	movs	r2, #1
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fe1e 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000e00:	e09c      	b.n	8000f3c <printLetter+0x484>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <printLetter+0x38c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	2101      	movs	r1, #1
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f000 fe17 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000e0e:	e095      	b.n	8000f3c <printLetter+0x484>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <printLetter+0x38c>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 fe10 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000e1c:	e08e      	b.n	8000f3c <printLetter+0x484>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <printLetter+0x38c>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 fe09 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000e2a:	e087      	b.n	8000f3c <printLetter+0x484>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <printLetter+0x38c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2102      	movs	r1, #2
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 fe02 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000e38:	e080      	b.n	8000f3c <printLetter+0x484>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	80000007 	.word	0x80000007
 8000e40:	08002bf8 	.word	0x08002bf8
 8000e44:	48000400 	.word	0x48000400
 8000e48:	48001400 	.word	0x48001400
 8000e4c:	08002c18 	.word	0x08002c18
 8000e50:	200003c0 	.word	0x200003c0
 8000e54:	08002c38 	.word	0x08002c38
 8000e58:	08002c58 	.word	0x08002c58
 8000e5c:	08002c78 	.word	0x08002c78
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8000e60:	4bd6      	ldr	r3, [pc, #856]	; (80011bc <printLetter+0x704>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	2102      	movs	r1, #2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 fde8 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000e6c:	e066      	b.n	8000f3c <printLetter+0x484>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	0059      	lsls	r1, r3, #1
 8000e72:	2390      	movs	r3, #144	; 0x90
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	2201      	movs	r2, #1
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 fddf 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000e7e:	e05d      	b.n	8000f3c <printLetter+0x484>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	48cd      	ldr	r0, [pc, #820]	; (80011bc <printLetter+0x704>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	0019      	movs	r1, r3
 8000e8a:	f000 fdd7 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000e8e:	e055      	b.n	8000f3c <printLetter+0x484>
		 	 }
	 }
	 else if(!letter[y + 16]){
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3310      	adds	r3, #16
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d14c      	bne.n	8000f3a <printLetter+0x482>
		 switch(y % 8)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4ac7      	ldr	r2, [pc, #796]	; (80011c0 <printLetter+0x708>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d504      	bpl.n	8000eb2 <printLetter+0x3fa>
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	2208      	movs	r2, #8
 8000eac:	4252      	negs	r2, r2
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	2b07      	cmp	r3, #7
 8000eb4:	d842      	bhi.n	8000f3c <printLetter+0x484>
 8000eb6:	009a      	lsls	r2, r3, #2
 8000eb8:	4bc2      	ldr	r3, [pc, #776]	; (80011c4 <printLetter+0x70c>)
 8000eba:	18d3      	adds	r3, r2, r3
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	469f      	mov	pc, r3
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	0159      	lsls	r1, r3, #5
 8000ec4:	2390      	movs	r3, #144	; 0x90
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	2200      	movs	r2, #0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 fdb6 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000ed0:	e034      	b.n	8000f3c <printLetter+0x484>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ed2:	4bbd      	ldr	r3, [pc, #756]	; (80011c8 <printLetter+0x710>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 fdaf 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000ede:	e02d      	b.n	8000f3c <printLetter+0x484>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ee0:	4bb9      	ldr	r3, [pc, #740]	; (80011c8 <printLetter+0x710>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 fda8 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000eec:	e026      	b.n	8000f3c <printLetter+0x484>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eee:	4bb6      	ldr	r3, [pc, #728]	; (80011c8 <printLetter+0x710>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 fda1 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000efa:	e01f      	b.n	8000f3c <printLetter+0x484>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000efc:	4bb2      	ldr	r3, [pc, #712]	; (80011c8 <printLetter+0x710>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	2102      	movs	r1, #2
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 fd9a 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000f08:	e018      	b.n	8000f3c <printLetter+0x484>
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f0a:	4bac      	ldr	r3, [pc, #688]	; (80011bc <printLetter+0x704>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2102      	movs	r1, #2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 fd93 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000f16:	e011      	b.n	8000f3c <printLetter+0x484>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	0059      	lsls	r1, r3, #1
 8000f1c:	2390      	movs	r3, #144	; 0x90
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	2200      	movs	r2, #0
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 fd8a 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000f28:	e008      	b.n	8000f3c <printLetter+0x484>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	48a3      	ldr	r0, [pc, #652]	; (80011bc <printLetter+0x704>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	0019      	movs	r1, r3
 8000f34:	f000 fd82 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000f38:	e000      	b.n	8000f3c <printLetter+0x484>
		 	 }
	 }
 8000f3a:	46c0      	nop			; (mov r8, r8)
 for (y=0; y<8; y++)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	dc00      	bgt.n	8000f4a <printLetter+0x492>
 8000f48:	e739      	b.n	8000dbe <printLetter+0x306>
 }
    HAL_Delay(dotTime);
 8000f4a:	4ba0      	ldr	r3, [pc, #640]	; (80011cc <printLetter+0x714>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	1c18      	adds	r0, r3, #0
 8000f50:	f7ff f966 	bl	8000220 <__aeabi_f2uiz>
 8000f54:	0003      	movs	r3, r0
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 fb30 	bl	80015bc <HAL_Delay>
 for(y = 0; y<8; y++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	e0ae      	b.n	80010c0 <printLetter+0x608>
    {
	 if(letter[y + 24]){
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3318      	adds	r3, #24
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	18d3      	adds	r3, r2, r3
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d04d      	beq.n	800100e <printLetter+0x556>
		 switch(y % 8)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4a92      	ldr	r2, [pc, #584]	; (80011c0 <printLetter+0x708>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	d504      	bpl.n	8000f84 <printLetter+0x4cc>
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	4252      	negs	r2, r2
 8000f80:	4313      	orrs	r3, r2
 8000f82:	3301      	adds	r3, #1
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	d900      	bls.n	8000f8a <printLetter+0x4d2>
 8000f88:	e097      	b.n	80010ba <printLetter+0x602>
 8000f8a:	009a      	lsls	r2, r3, #2
 8000f8c:	4b90      	ldr	r3, [pc, #576]	; (80011d0 <printLetter+0x718>)
 8000f8e:	18d3      	adds	r3, r2, r3
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	469f      	mov	pc, r3
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	0159      	lsls	r1, r3, #5
 8000f98:	2390      	movs	r3, #144	; 0x90
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fd4c 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000fa4:	e089      	b.n	80010ba <printLetter+0x602>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000fa6:	4b88      	ldr	r3, [pc, #544]	; (80011c8 <printLetter+0x710>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2101      	movs	r1, #1
 8000fac:	0018      	movs	r0, r3
 8000fae:	f000 fd45 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000fb2:	e082      	b.n	80010ba <printLetter+0x602>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fb4:	4b84      	ldr	r3, [pc, #528]	; (80011c8 <printLetter+0x710>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 fd3e 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000fc0:	e07b      	b.n	80010ba <printLetter+0x602>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fc2:	4b81      	ldr	r3, [pc, #516]	; (80011c8 <printLetter+0x710>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2140      	movs	r1, #64	; 0x40
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 fd37 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000fce:	e074      	b.n	80010ba <printLetter+0x602>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000fd0:	4b7d      	ldr	r3, [pc, #500]	; (80011c8 <printLetter+0x710>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 fd30 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000fdc:	e06d      	b.n	80010ba <printLetter+0x602>
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8000fde:	4b77      	ldr	r3, [pc, #476]	; (80011bc <printLetter+0x704>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 fd29 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000fea:	e066      	b.n	80010ba <printLetter+0x602>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	0059      	lsls	r1, r3, #1
 8000ff0:	2390      	movs	r3, #144	; 0x90
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fd20 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8000ffc:	e05d      	b.n	80010ba <printLetter+0x602>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	486e      	ldr	r0, [pc, #440]	; (80011bc <printLetter+0x704>)
 8001004:	2201      	movs	r2, #1
 8001006:	0019      	movs	r1, r3
 8001008:	f000 fd18 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800100c:	e055      	b.n	80010ba <printLetter+0x602>
		 	 }
	 }
	 else if(!letter[y + 24]){
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3318      	adds	r3, #24
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	18d3      	adds	r3, r2, r3
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d14c      	bne.n	80010b8 <printLetter+0x600>
		 switch(y % 8)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4a67      	ldr	r2, [pc, #412]	; (80011c0 <printLetter+0x708>)
 8001022:	4013      	ands	r3, r2
 8001024:	d504      	bpl.n	8001030 <printLetter+0x578>
 8001026:	3b01      	subs	r3, #1
 8001028:	2208      	movs	r2, #8
 800102a:	4252      	negs	r2, r2
 800102c:	4313      	orrs	r3, r2
 800102e:	3301      	adds	r3, #1
 8001030:	2b07      	cmp	r3, #7
 8001032:	d842      	bhi.n	80010ba <printLetter+0x602>
 8001034:	009a      	lsls	r2, r3, #2
 8001036:	4b67      	ldr	r3, [pc, #412]	; (80011d4 <printLetter+0x71c>)
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	469f      	mov	pc, r3
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	0159      	lsls	r1, r3, #5
 8001042:	2390      	movs	r3, #144	; 0x90
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	2200      	movs	r2, #0
 8001048:	0018      	movs	r0, r3
 800104a:	f000 fcf7 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800104e:	e034      	b.n	80010ba <printLetter+0x602>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001050:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <printLetter+0x710>)
 8001052:	2200      	movs	r2, #0
 8001054:	2101      	movs	r1, #1
 8001056:	0018      	movs	r0, r3
 8001058:	f000 fcf0 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800105c:	e02d      	b.n	80010ba <printLetter+0x602>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800105e:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <printLetter+0x710>)
 8001060:	2200      	movs	r2, #0
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	0018      	movs	r0, r3
 8001066:	f000 fce9 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800106a:	e026      	b.n	80010ba <printLetter+0x602>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800106c:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <printLetter+0x710>)
 800106e:	2200      	movs	r2, #0
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	0018      	movs	r0, r3
 8001074:	f000 fce2 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001078:	e01f      	b.n	80010ba <printLetter+0x602>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800107a:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <printLetter+0x710>)
 800107c:	2200      	movs	r2, #0
 800107e:	2102      	movs	r1, #2
 8001080:	0018      	movs	r0, r3
 8001082:	f000 fcdb 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001086:	e018      	b.n	80010ba <printLetter+0x602>
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001088:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <printLetter+0x704>)
 800108a:	2200      	movs	r2, #0
 800108c:	2102      	movs	r1, #2
 800108e:	0018      	movs	r0, r3
 8001090:	f000 fcd4 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001094:	e011      	b.n	80010ba <printLetter+0x602>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	0059      	lsls	r1, r3, #1
 800109a:	2390      	movs	r3, #144	; 0x90
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	2200      	movs	r2, #0
 80010a0:	0018      	movs	r0, r3
 80010a2:	f000 fccb 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 80010a6:	e008      	b.n	80010ba <printLetter+0x602>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	4843      	ldr	r0, [pc, #268]	; (80011bc <printLetter+0x704>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	0019      	movs	r1, r3
 80010b2:	f000 fcc3 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 80010b6:	e000      	b.n	80010ba <printLetter+0x602>
		 	 }
	 }
 80010b8:	46c0      	nop			; (mov r8, r8)
 for(y = 0; y<8; y++)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	dc00      	bgt.n	80010c8 <printLetter+0x610>
 80010c6:	e74c      	b.n	8000f62 <printLetter+0x4aa>
    }
 	 HAL_Delay(dotTime);
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <printLetter+0x714>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1c18      	adds	r0, r3, #0
 80010ce:	f7ff f8a7 	bl	8000220 <__aeabi_f2uiz>
 80010d2:	0003      	movs	r3, r0
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fa71 	bl	80015bc <HAL_Delay>
for(y = 0; y<8; y++)
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e0c0      	b.n	8001262 <printLetter+0x7aa>
    {
	 if(letter[y + 32]){
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3320      	adds	r3, #32
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	18d3      	adds	r3, r2, r3
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d04d      	beq.n	800118c <printLetter+0x6d4>
		 switch(y % 8)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <printLetter+0x708>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	d504      	bpl.n	8001102 <printLetter+0x64a>
 80010f8:	3b01      	subs	r3, #1
 80010fa:	2208      	movs	r2, #8
 80010fc:	4252      	negs	r2, r2
 80010fe:	4313      	orrs	r3, r2
 8001100:	3301      	adds	r3, #1
 8001102:	2b07      	cmp	r3, #7
 8001104:	d900      	bls.n	8001108 <printLetter+0x650>
 8001106:	e0a9      	b.n	800125c <printLetter+0x7a4>
 8001108:	009a      	lsls	r2, r3, #2
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <printLetter+0x720>)
 800110c:	18d3      	adds	r3, r2, r3
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	469f      	mov	pc, r3
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	0159      	lsls	r1, r3, #5
 8001116:	2390      	movs	r3, #144	; 0x90
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	2201      	movs	r2, #1
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fc8d 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001122:	e09b      	b.n	800125c <printLetter+0x7a4>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <printLetter+0x710>)
 8001126:	2201      	movs	r2, #1
 8001128:	2101      	movs	r1, #1
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fc86 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001130:	e094      	b.n	800125c <printLetter+0x7a4>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <printLetter+0x710>)
 8001134:	2201      	movs	r2, #1
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	0018      	movs	r0, r3
 800113a:	f000 fc7f 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800113e:	e08d      	b.n	800125c <printLetter+0x7a4>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <printLetter+0x710>)
 8001142:	2201      	movs	r2, #1
 8001144:	2140      	movs	r1, #64	; 0x40
 8001146:	0018      	movs	r0, r3
 8001148:	f000 fc78 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800114c:	e086      	b.n	800125c <printLetter+0x7a4>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <printLetter+0x710>)
 8001150:	2201      	movs	r2, #1
 8001152:	2102      	movs	r1, #2
 8001154:	0018      	movs	r0, r3
 8001156:	f000 fc71 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800115a:	e07f      	b.n	800125c <printLetter+0x7a4>
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <printLetter+0x704>)
 800115e:	2201      	movs	r2, #1
 8001160:	2102      	movs	r1, #2
 8001162:	0018      	movs	r0, r3
 8001164:	f000 fc6a 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001168:	e078      	b.n	800125c <printLetter+0x7a4>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	0059      	lsls	r1, r3, #1
 800116e:	2390      	movs	r3, #144	; 0x90
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	2201      	movs	r2, #1
 8001174:	0018      	movs	r0, r3
 8001176:	f000 fc61 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800117a:	e06f      	b.n	800125c <printLetter+0x7a4>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <printLetter+0x704>)
 8001182:	2201      	movs	r2, #1
 8001184:	0019      	movs	r1, r3
 8001186:	f000 fc59 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800118a:	e067      	b.n	800125c <printLetter+0x7a4>
		 	 }
	 }
	 else if(!letter[y + 32]){
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3320      	adds	r3, #32
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	18d3      	adds	r3, r2, r3
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d15e      	bne.n	800125a <printLetter+0x7a2>
		 switch(y % 8)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <printLetter+0x708>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	d504      	bpl.n	80011ae <printLetter+0x6f6>
 80011a4:	3b01      	subs	r3, #1
 80011a6:	2208      	movs	r2, #8
 80011a8:	4252      	negs	r2, r2
 80011aa:	4313      	orrs	r3, r2
 80011ac:	3301      	adds	r3, #1
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	d854      	bhi.n	800125c <printLetter+0x7a4>
 80011b2:	009a      	lsls	r2, r3, #2
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <printLetter+0x724>)
 80011b6:	18d3      	adds	r3, r2, r3
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	469f      	mov	pc, r3
 80011bc:	48001400 	.word	0x48001400
 80011c0:	80000007 	.word	0x80000007
 80011c4:	08002c98 	.word	0x08002c98
 80011c8:	48000400 	.word	0x48000400
 80011cc:	200003c0 	.word	0x200003c0
 80011d0:	08002cb8 	.word	0x08002cb8
 80011d4:	08002cd8 	.word	0x08002cd8
 80011d8:	08002cf8 	.word	0x08002cf8
 80011dc:	08002d18 	.word	0x08002d18
		 	 {
		 	 case 0:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	0159      	lsls	r1, r3, #5
 80011e4:	2390      	movs	r3, #144	; 0x90
 80011e6:	05db      	lsls	r3, r3, #23
 80011e8:	2200      	movs	r2, #0
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 fc26 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 80011f0:	e034      	b.n	800125c <printLetter+0x7a4>
		 	 case 1:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <printLetter+0x850>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	2101      	movs	r1, #1
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 fc1f 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 80011fe:	e02d      	b.n	800125c <printLetter+0x7a4>
		 	 case 2:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001200:	4b41      	ldr	r3, [pc, #260]	; (8001308 <printLetter+0x850>)
 8001202:	2200      	movs	r2, #0
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0018      	movs	r0, r3
 8001208:	f000 fc18 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800120c:	e026      	b.n	800125c <printLetter+0x7a4>
		 	 case 3:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800120e:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <printLetter+0x850>)
 8001210:	2200      	movs	r2, #0
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	0018      	movs	r0, r3
 8001216:	f000 fc11 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 800121a:	e01f      	b.n	800125c <printLetter+0x7a4>
		 	 case 4:
		 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800121c:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <printLetter+0x850>)
 800121e:	2200      	movs	r2, #0
 8001220:	2102      	movs	r1, #2
 8001222:	0018      	movs	r0, r3
 8001224:	f000 fc0a 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001228:	e018      	b.n	800125c <printLetter+0x7a4>
		 	 case 5:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <printLetter+0x854>)
 800122c:	2200      	movs	r2, #0
 800122e:	2102      	movs	r1, #2
 8001230:	0018      	movs	r0, r3
 8001232:	f000 fc03 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001236:	e011      	b.n	800125c <printLetter+0x7a4>
		 	 case 6:
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	0059      	lsls	r1, r3, #1
 800123c:	2390      	movs	r3, #144	; 0x90
 800123e:	05db      	lsls	r3, r3, #23
 8001240:	2200      	movs	r2, #0
 8001242:	0018      	movs	r0, r3
 8001244:	f000 fbfa 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001248:	e008      	b.n	800125c <printLetter+0x7a4>
		 	 case 7:
		 		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	482f      	ldr	r0, [pc, #188]	; (800130c <printLetter+0x854>)
 8001250:	2200      	movs	r2, #0
 8001252:	0019      	movs	r1, r3
 8001254:	f000 fbf2 	bl	8001a3c <HAL_GPIO_WritePin>
		 		 break;
 8001258:	e000      	b.n	800125c <printLetter+0x7a4>
		 	 }
	 }
 800125a:	46c0      	nop			; (mov r8, r8)
for(y = 0; y<8; y++)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b07      	cmp	r3, #7
 8001266:	dc00      	bgt.n	800126a <printLetter+0x7b2>
 8001268:	e73a      	b.n	80010e0 <printLetter+0x628>
    }
  	  HAL_Delay(dotTime);
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <printLetter+0x858>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	1c18      	adds	r0, r3, #0
 8001270:	f7fe ffd6 	bl	8000220 <__aeabi_f2uiz>
 8001274:	0003      	movs	r3, r0
 8001276:	0018      	movs	r0, r3
 8001278:	f000 f9a0 	bl	80015bc <HAL_Delay>
 // printing the space between the letters
 for (y=0; y<8; y++)
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	e037      	b.n	80012f2 <printLetter+0x83a>
 {
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	0159      	lsls	r1, r3, #5
 8001286:	2390      	movs	r3, #144	; 0x90
 8001288:	05db      	lsls	r3, r3, #23
 800128a:	2200      	movs	r2, #0
 800128c:	0018      	movs	r0, r3
 800128e:	f000 fbd5 	bl	8001a3c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <printLetter+0x850>)
 8001294:	2200      	movs	r2, #0
 8001296:	2101      	movs	r1, #1
 8001298:	0018      	movs	r0, r3
 800129a:	f000 fbcf 	bl	8001a3c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <printLetter+0x850>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	0018      	movs	r0, r3
 80012a6:	f000 fbc9 	bl	8001a3c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <printLetter+0x850>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	2140      	movs	r1, #64	; 0x40
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 fbc3 	bl	8001a3c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <printLetter+0x850>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	2102      	movs	r1, #2
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 fbbd 	bl	8001a3c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <printLetter+0x854>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	2102      	movs	r1, #2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 fbb7 	bl	8001a3c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	0059      	lsls	r1, r3, #1
 80012d2:	2390      	movs	r3, #144	; 0x90
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	2200      	movs	r2, #0
 80012d8:	0018      	movs	r0, r3
 80012da:	f000 fbaf 	bl	8001a3c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	480a      	ldr	r0, [pc, #40]	; (800130c <printLetter+0x854>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	0019      	movs	r1, r3
 80012e8:	f000 fba8 	bl	8001a3c <HAL_GPIO_WritePin>
 for (y=0; y<8; y++)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b07      	cmp	r3, #7
 80012f6:	ddc4      	ble.n	8001282 <printLetter+0x7ca>
 }
 	 HAL_Delay(0.006);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 f95f 	bl	80015bc <HAL_Delay>
 }
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	48000400 	.word	0x48000400
 800130c:	48001400 	.word	0x48001400
 8001310:	200003c0 	.word	0x200003c0

08001314 <loop>:

void loop()//write here =)
 {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
 printLetter (Y);
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <loop+0x54>)
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff fbcc 	bl	8000ab8 <printLetter>
 printLetter (O);
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <loop+0x58>)
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff fbc8 	bl	8000ab8 <printLetter>
 printLetter (U);
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <loop+0x5c>)
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff fbc4 	bl	8000ab8 <printLetter>
 printLetter (T);
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <loop+0x60>)
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fbc0 	bl	8000ab8 <printLetter>
 printLetter (U);
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <loop+0x5c>)
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff fbbc 	bl	8000ab8 <printLetter>
 printLetter (B);
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <loop+0x64>)
 8001342:	0018      	movs	r0, r3
 8001344:	f7ff fbb8 	bl	8000ab8 <printLetter>
 printLetter (E);
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <loop+0x68>)
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff fbb4 	bl	8000ab8 <printLetter>
 printLetter (_);
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <loop+0x6c>)
 8001352:	0018      	movs	r0, r3
 8001354:	f7ff fbb0 	bl	8000ab8 <printLetter>
 printLetter (_);
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <loop+0x6c>)
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff fbac 	bl	8000ab8 <printLetter>
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000320 	.word	0x20000320
 800136c:	20000140 	.word	0x20000140
 8001370:	20000280 	.word	0x20000280
 8001374:	200001e0 	.word	0x200001e0
 8001378:	20000000 	.word	0x20000000
 800137c:	200000a0 	.word	0x200000a0
 8001380:	200003ec 	.word	0x200003ec

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x44>)
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_MspInit+0x44>)
 8001390:	2101      	movs	r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x44>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2201      	movs	r2, #1
 800139c:	4013      	ands	r3, r2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x44>)
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_MspInit+0x44>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	0549      	lsls	r1, r1, #21
 80013ac:	430a      	orrs	r2, r1
 80013ae:	61da      	str	r2, [r3, #28]
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_MspInit+0x44>)
 80013b2:	69da      	ldr	r2, [r3, #28]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	055b      	lsls	r3, r3, #21
 80013b8:	4013      	ands	r3, r2
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b08b      	sub	sp, #44	; 0x2c
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	2414      	movs	r4, #20
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	0018      	movs	r0, r3
 80013da:	2314      	movs	r3, #20
 80013dc:	001a      	movs	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	f001 fbe6 	bl	8002bb0 <memset>
  if(huart->Instance==USART1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1c      	ldr	r2, [pc, #112]	; (800145c <HAL_UART_MspInit+0x90>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d132      	bne.n	8001454 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_UART_MspInit+0x94>)
 80013f0:	699a      	ldr	r2, [r3, #24]
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_UART_MspInit+0x94>)
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	01c9      	lsls	r1, r1, #7
 80013f8:	430a      	orrs	r2, r1
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_UART_MspInit+0x94>)
 80013fe:	699a      	ldr	r2, [r3, #24]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	01db      	lsls	r3, r3, #7
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_UART_MspInit+0x94>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_UART_MspInit+0x94>)
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	0289      	lsls	r1, r1, #10
 8001414:	430a      	orrs	r2, r1
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_UART_MspInit+0x94>)
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001426:	0021      	movs	r1, r4
 8001428:	187b      	adds	r3, r7, r1
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_UART_MspInit+0x98>)
 800142c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2202      	movs	r2, #2
 8001432:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2203      	movs	r2, #3
 800143e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2201      	movs	r2, #1
 8001444:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	187a      	adds	r2, r7, r1
 8001448:	2390      	movs	r3, #144	; 0x90
 800144a:	05db      	lsls	r3, r3, #23
 800144c:	0011      	movs	r1, r2
 800144e:	0018      	movs	r0, r3
 8001450:	f000 f98c 	bl	800176c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b00b      	add	sp, #44	; 0x2c
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	40013800 	.word	0x40013800
 8001460:	40021000 	.word	0x40021000
 8001464:	00008004 	.word	0x00008004

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f87a 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopForever+0x6>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopForever+0xe>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopForever+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014ca:	f7ff ffe4 	bl	8001496 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80014ce:	f001 fb4b 	bl	8002b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014d2:	f7ff f9bb 	bl	800084c <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   r0, =_estack
 80014d8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	200003d0 	.word	0x200003d0
  ldr r2, =_sidata
 80014e4:	08002d58 	.word	0x08002d58
  ldr r2, =_sbss
 80014e8:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 80014ec:	20000514 	.word	0x20000514

080014f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_IRQHandler>
	...

080014f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_Init+0x24>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_Init+0x24>)
 80014fe:	2110      	movs	r1, #16
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001504:	2000      	movs	r0, #0
 8001506:	f000 f809 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150a:	f7ff ff3b 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40022000 	.word	0x40022000

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_InitTick+0x5c>)
 8001526:	681c      	ldr	r4, [r3, #0]
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_InitTick+0x60>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	0019      	movs	r1, r3
 800152e:	23fa      	movs	r3, #250	; 0xfa
 8001530:	0098      	lsls	r0, r3, #2
 8001532:	f7fe fde9 	bl	8000108 <__udivsi3>
 8001536:	0003      	movs	r3, r0
 8001538:	0019      	movs	r1, r3
 800153a:	0020      	movs	r0, r4
 800153c:	f7fe fde4 	bl	8000108 <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	0018      	movs	r0, r3
 8001544:	f000 f905 	bl	8001752 <HAL_SYSTICK_Config>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d001      	beq.n	8001550 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e00f      	b.n	8001570 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d80b      	bhi.n	800156e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	2301      	movs	r3, #1
 800155a:	425b      	negs	r3, r3
 800155c:	2200      	movs	r2, #0
 800155e:	0018      	movs	r0, r3
 8001560:	f000 f8e2 	bl	8001728 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_InitTick+0x64>)
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b003      	add	sp, #12
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	200003c4 	.word	0x200003c4
 800157c:	200003cc 	.word	0x200003cc
 8001580:	200003c8 	.word	0x200003c8

08001584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x1c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	001a      	movs	r2, r3
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x20>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	18d2      	adds	r2, r2, r3
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_IncTick+0x20>)
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	200003cc 	.word	0x200003cc
 80015a4:	20000510 	.word	0x20000510

080015a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <HAL_GetTick+0x10>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	20000510 	.word	0x20000510

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff fff0 	bl	80015a8 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_Delay+0x44>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	001a      	movs	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	f7ff ffe0 	bl	80015a8 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	200003cc 	.word	0x200003cc

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	0002      	movs	r2, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b7f      	cmp	r3, #127	; 0x7f
 8001618:	d828      	bhi.n	800166c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161a:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <__NVIC_SetPriority+0xd4>)
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b25b      	sxtb	r3, r3
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	33c0      	adds	r3, #192	; 0xc0
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	589b      	ldr	r3, [r3, r2]
 800162a:	1dfa      	adds	r2, r7, #7
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	0011      	movs	r1, r2
 8001630:	2203      	movs	r2, #3
 8001632:	400a      	ands	r2, r1
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	21ff      	movs	r1, #255	; 0xff
 8001638:	4091      	lsls	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	43d2      	mvns	r2, r2
 800163e:	401a      	ands	r2, r3
 8001640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	22ff      	movs	r2, #255	; 0xff
 8001648:	401a      	ands	r2, r3
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	2303      	movs	r3, #3
 8001652:	4003      	ands	r3, r0
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001658:	481f      	ldr	r0, [pc, #124]	; (80016d8 <__NVIC_SetPriority+0xd4>)
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	430a      	orrs	r2, r1
 8001664:	33c0      	adds	r3, #192	; 0xc0
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800166a:	e031      	b.n	80016d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <__NVIC_SetPriority+0xd8>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	0019      	movs	r1, r3
 8001674:	230f      	movs	r3, #15
 8001676:	400b      	ands	r3, r1
 8001678:	3b08      	subs	r3, #8
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3306      	adds	r3, #6
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	3304      	adds	r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1dfa      	adds	r2, r7, #7
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	0011      	movs	r1, r2
 800168c:	2203      	movs	r2, #3
 800168e:	400a      	ands	r2, r1
 8001690:	00d2      	lsls	r2, r2, #3
 8001692:	21ff      	movs	r1, #255	; 0xff
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	43d2      	mvns	r2, r2
 800169a:	401a      	ands	r2, r3
 800169c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	22ff      	movs	r2, #255	; 0xff
 80016a4:	401a      	ands	r2, r3
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	0018      	movs	r0, r3
 80016ac:	2303      	movs	r3, #3
 80016ae:	4003      	ands	r3, r0
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <__NVIC_SetPriority+0xd8>)
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	001c      	movs	r4, r3
 80016bc:	230f      	movs	r3, #15
 80016be:	4023      	ands	r3, r4
 80016c0:	3b08      	subs	r3, #8
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	430a      	orrs	r2, r1
 80016c6:	3306      	adds	r3, #6
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	18c3      	adds	r3, r0, r3
 80016cc:	3304      	adds	r3, #4
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b003      	add	sp, #12
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1e5a      	subs	r2, r3, #1
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	045b      	lsls	r3, r3, #17
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d301      	bcc.n	80016f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f4:	2301      	movs	r3, #1
 80016f6:	e010      	b.n	800171a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <SysTick_Config+0x44>)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	3a01      	subs	r2, #1
 80016fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001700:	2301      	movs	r3, #1
 8001702:	425b      	negs	r3, r3
 8001704:	2103      	movs	r1, #3
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff ff7c 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x44>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x44>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	210f      	movs	r1, #15
 8001734:	187b      	adds	r3, r7, r1
 8001736:	1c02      	adds	r2, r0, #0
 8001738:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	187b      	adds	r3, r7, r1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25b      	sxtb	r3, r3
 8001742:	0011      	movs	r1, r2
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff ffbf 	bl	80016e0 <SysTick_Config>
 8001762:	0003      	movs	r3, r0
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177a:	e149      	b.n	8001a10 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4091      	lsls	r1, r2
 8001786:	000a      	movs	r2, r1
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d100      	bne.n	8001794 <HAL_GPIO_Init+0x28>
 8001792:	e13a      	b.n	8001a0a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	4013      	ands	r3, r2
 800179c:	2b01      	cmp	r3, #1
 800179e:	d005      	beq.n	80017ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d130      	bne.n	800180e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e2:	2201      	movs	r2, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	43da      	mvns	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	2201      	movs	r2, #1
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	4013      	ands	r3, r2
 8001816:	2b03      	cmp	r3, #3
 8001818:	d017      	beq.n	800184a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2203      	movs	r2, #3
 8001850:	4013      	ands	r3, r2
 8001852:	2b02      	cmp	r3, #2
 8001854:	d123      	bne.n	800189e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	58d3      	ldr	r3, [r2, r3]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2207      	movs	r2, #7
 8001868:	4013      	ands	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2107      	movs	r1, #7
 8001882:	400b      	ands	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	6939      	ldr	r1, [r7, #16]
 800189c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	409a      	lsls	r2, r3
 80018ac:	0013      	movs	r3, r2
 80018ae:	43da      	mvns	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	401a      	ands	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	409a      	lsls	r2, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	23c0      	movs	r3, #192	; 0xc0
 80018d8:	029b      	lsls	r3, r3, #10
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_GPIO_Init+0x174>
 80018de:	e094      	b.n	8001a0a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e0:	4b51      	ldr	r3, [pc, #324]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	619a      	str	r2, [r3, #24]
 80018ec:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	589b      	ldr	r3, [r3, r2]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2203      	movs	r2, #3
 800190a:	4013      	ands	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	43da      	mvns	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	2390      	movs	r3, #144	; 0x90
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	429a      	cmp	r2, r3
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x1d6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a41      	ldr	r2, [pc, #260]	; (8001a30 <HAL_GPIO_Init+0x2c4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x1d2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a40      	ldr	r2, [pc, #256]	; (8001a34 <HAL_GPIO_Init+0x2c8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x1ce>
 8001936:	2302      	movs	r3, #2
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x1d8>
 800193a:	2305      	movs	r3, #5
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x1d8>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x1d8>
 8001942:	2300      	movs	r3, #0
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	2103      	movs	r1, #3
 8001948:	400a      	ands	r2, r1
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001954:	4935      	ldr	r1, [pc, #212]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	4013      	ands	r3, r2
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43da      	mvns	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	029b      	lsls	r3, r3, #10
 80019a4:	4013      	ands	r3, r2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43da      	mvns	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	035b      	lsls	r3, r3, #13
 80019ce:	4013      	ands	r3, r2
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43da      	mvns	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	039b      	lsls	r3, r3, #14
 80019f8:	4013      	ands	r3, r2
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	40da      	lsrs	r2, r3
 8001a18:	1e13      	subs	r3, r2, #0
 8001a1a:	d000      	beq.n	8001a1e <HAL_GPIO_Init+0x2b2>
 8001a1c:	e6ae      	b.n	800177c <HAL_GPIO_Init+0x10>
  } 
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b006      	add	sp, #24
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	48000800 	.word	0x48000800
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	0008      	movs	r0, r1
 8001a46:	0011      	movs	r1, r2
 8001a48:	1cbb      	adds	r3, r7, #2
 8001a4a:	1c02      	adds	r2, r0, #0
 8001a4c:	801a      	strh	r2, [r3, #0]
 8001a4e:	1c7b      	adds	r3, r7, #1
 8001a50:	1c0a      	adds	r2, r1, #0
 8001a52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a54:	1c7b      	adds	r3, r7, #1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5c:	1cbb      	adds	r3, r7, #2
 8001a5e:	881a      	ldrh	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a64:	e003      	b.n	8001a6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a66:	1cbb      	adds	r3, r7, #2
 8001a68:	881a      	ldrh	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e301      	b.n	800208e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	d100      	bne.n	8001a96 <HAL_RCC_OscConfig+0x1e>
 8001a94:	e08d      	b.n	8001bb2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a96:	4bc3      	ldr	r3, [pc, #780]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d00e      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa2:	4bc0      	ldr	r3, [pc, #768]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x64>
 8001aae:	4bbd      	ldr	r3, [pc, #756]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	025b      	lsls	r3, r3, #9
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	025b      	lsls	r3, r3, #9
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d10d      	bne.n	8001adc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	4bb8      	ldr	r3, [pc, #736]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	029b      	lsls	r3, r3, #10
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d100      	bne.n	8001ace <HAL_RCC_OscConfig+0x56>
 8001acc:	e070      	b.n	8001bb0 <HAL_RCC_OscConfig+0x138>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d000      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x60>
 8001ad6:	e06b      	b.n	8001bb0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e2d8      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_OscConfig+0x7c>
 8001ae4:	4baf      	ldr	r3, [pc, #700]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4bae      	ldr	r3, [pc, #696]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0249      	lsls	r1, r1, #9
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e02f      	b.n	8001b54 <HAL_RCC_OscConfig+0xdc>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x9e>
 8001afc:	4ba9      	ldr	r3, [pc, #676]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4ba8      	ldr	r3, [pc, #672]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	49a9      	ldr	r1, [pc, #676]	; (8001da8 <HAL_RCC_OscConfig+0x330>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	4ba6      	ldr	r3, [pc, #664]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4ba5      	ldr	r3, [pc, #660]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	49a7      	ldr	r1, [pc, #668]	; (8001dac <HAL_RCC_OscConfig+0x334>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e01e      	b.n	8001b54 <HAL_RCC_OscConfig+0xdc>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d10e      	bne.n	8001b3c <HAL_RCC_OscConfig+0xc4>
 8001b1e:	4ba1      	ldr	r3, [pc, #644]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4ba0      	ldr	r3, [pc, #640]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	02c9      	lsls	r1, r1, #11
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	4b9d      	ldr	r3, [pc, #628]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b9c      	ldr	r3, [pc, #624]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	0249      	lsls	r1, r1, #9
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0xdc>
 8001b3c:	4b99      	ldr	r3, [pc, #612]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b98      	ldr	r3, [pc, #608]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	4999      	ldr	r1, [pc, #612]	; (8001da8 <HAL_RCC_OscConfig+0x330>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	4b96      	ldr	r3, [pc, #600]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b95      	ldr	r3, [pc, #596]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	4997      	ldr	r1, [pc, #604]	; (8001dac <HAL_RCC_OscConfig+0x334>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d014      	beq.n	8001b86 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fd24 	bl	80015a8 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b66:	f7ff fd1f 	bl	80015a8 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b64      	cmp	r3, #100	; 0x64
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e28a      	b.n	800208e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b78:	4b8a      	ldr	r3, [pc, #552]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	029b      	lsls	r3, r3, #10
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0xee>
 8001b84:	e015      	b.n	8001bb2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fd0f 	bl	80015a8 <HAL_GetTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fd0a 	bl	80015a8 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e275      	b.n	800208e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b80      	ldr	r3, [pc, #512]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	4013      	ands	r3, r2
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x118>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d100      	bne.n	8001bbe <HAL_RCC_OscConfig+0x146>
 8001bbc:	e069      	b.n	8001c92 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bbe:	4b79      	ldr	r3, [pc, #484]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d00b      	beq.n	8001be0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bc8:	4b76      	ldr	r3, [pc, #472]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	220c      	movs	r2, #12
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d11c      	bne.n	8001c0e <HAL_RCC_OscConfig+0x196>
 8001bd4:	4b73      	ldr	r3, [pc, #460]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	025b      	lsls	r3, r3, #9
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d116      	bne.n	8001c0e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be0:	4b70      	ldr	r3, [pc, #448]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x17e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e24b      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	22f8      	movs	r2, #248	; 0xf8
 8001bfc:	4393      	bics	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	00da      	lsls	r2, r3, #3
 8001c06:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0c:	e041      	b.n	8001c92 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d024      	beq.n	8001c60 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b62      	ldr	r3, [pc, #392]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fcc1 	bl	80015a8 <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fcbc 	bl	80015a8 <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e227      	b.n	800208e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d0f1      	beq.n	8001c2c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22f8      	movs	r2, #248	; 0xf8
 8001c4e:	4393      	bics	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00da      	lsls	r2, r3, #3
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e018      	b.n	8001c92 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	438a      	bics	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fc9c 	bl	80015a8 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fc97 	bl	80015a8 <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e202      	b.n	800208e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c88:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d1f1      	bne.n	8001c76 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2208      	movs	r2, #8
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d036      	beq.n	8001d0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d019      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca4:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca8:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	430a      	orrs	r2, r1
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fc7a 	bl	80015a8 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cba:	f7ff fc75 	bl	80015a8 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e1e0      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d0f1      	beq.n	8001cba <HAL_RCC_OscConfig+0x242>
 8001cd6:	e018      	b.n	8001d0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cdc:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	438a      	bics	r2, r1
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fc60 	bl	80015a8 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff fc5b 	bl	80015a8 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1c6      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d1f1      	bne.n	8001cee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	4013      	ands	r3, r2
 8001d12:	d100      	bne.n	8001d16 <HAL_RCC_OscConfig+0x29e>
 8001d14:	e0b4      	b.n	8001e80 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d16:	201f      	movs	r0, #31
 8001d18:	183b      	adds	r3, r7, r0
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	055b      	lsls	r3, r3, #21
 8001d26:	4013      	ands	r3, r2
 8001d28:	d110      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	69da      	ldr	r2, [r3, #28]
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	0549      	lsls	r1, r1, #21
 8001d34:	430a      	orrs	r2, r1
 8001d36:	61da      	str	r2, [r3, #28]
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	055b      	lsls	r3, r3, #21
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_RCC_OscConfig+0x338>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4013      	ands	r3, r2
 8001d56:	d11a      	bne.n	8001d8e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_RCC_OscConfig+0x338>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_RCC_OscConfig+0x338>)
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	0049      	lsls	r1, r1, #1
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7ff fc1f 	bl	80015a8 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d70:	f7ff fc1a 	bl	80015a8 <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e185      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_OscConfig+0x338>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10e      	bne.n	8001db4 <HAL_RCC_OscConfig+0x33c>
 8001d96:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	4b02      	ldr	r3, [pc, #8]	; (8001da4 <HAL_RCC_OscConfig+0x32c>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	621a      	str	r2, [r3, #32]
 8001da2:	e035      	b.n	8001e10 <HAL_RCC_OscConfig+0x398>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	fffeffff 	.word	0xfffeffff
 8001dac:	fffbffff 	.word	0xfffbffff
 8001db0:	40007000 	.word	0x40007000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x35e>
 8001dbc:	4bb6      	ldr	r3, [pc, #728]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001dbe:	6a1a      	ldr	r2, [r3, #32]
 8001dc0:	4bb5      	ldr	r3, [pc, #724]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	621a      	str	r2, [r3, #32]
 8001dc8:	4bb3      	ldr	r3, [pc, #716]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001dca:	6a1a      	ldr	r2, [r3, #32]
 8001dcc:	4bb2      	ldr	r3, [pc, #712]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001dce:	2104      	movs	r1, #4
 8001dd0:	438a      	bics	r2, r1
 8001dd2:	621a      	str	r2, [r3, #32]
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x398>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x380>
 8001dde:	4bae      	ldr	r3, [pc, #696]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001de0:	6a1a      	ldr	r2, [r3, #32]
 8001de2:	4bad      	ldr	r3, [pc, #692]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001de4:	2104      	movs	r1, #4
 8001de6:	430a      	orrs	r2, r1
 8001de8:	621a      	str	r2, [r3, #32]
 8001dea:	4bab      	ldr	r3, [pc, #684]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	4baa      	ldr	r3, [pc, #680]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	621a      	str	r2, [r3, #32]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x398>
 8001df8:	4ba7      	ldr	r3, [pc, #668]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	4ba6      	ldr	r3, [pc, #664]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	438a      	bics	r2, r1
 8001e02:	621a      	str	r2, [r3, #32]
 8001e04:	4ba4      	ldr	r3, [pc, #656]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	4ba3      	ldr	r3, [pc, #652]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d014      	beq.n	8001e42 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff fbc6 	bl	80015a8 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff fbc1 	bl	80015a8 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a9b      	ldr	r2, [pc, #620]	; (800209c <HAL_RCC_OscConfig+0x624>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e12b      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	4b98      	ldr	r3, [pc, #608]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3aa>
 8001e40:	e013      	b.n	8001e6a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7ff fbb1 	bl	80015a8 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fbac 	bl	80015a8 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	4a91      	ldr	r2, [pc, #580]	; (800209c <HAL_RCC_OscConfig+0x624>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e116      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	4b8d      	ldr	r3, [pc, #564]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e6a:	231f      	movs	r3, #31
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b88      	ldr	r3, [pc, #544]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	4b87      	ldr	r3, [pc, #540]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001e7a:	4989      	ldr	r1, [pc, #548]	; (80020a0 <HAL_RCC_OscConfig+0x628>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2210      	movs	r2, #16
 8001e86:	4013      	ands	r3, r2
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d12a      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e92:	4b81      	ldr	r3, [pc, #516]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e96:	4b80      	ldr	r3, [pc, #512]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001e98:	2104      	movs	r1, #4
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e9e:	4b7e      	ldr	r3, [pc, #504]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea2:	4b7d      	ldr	r3, [pc, #500]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fb7d 	bl	80015a8 <HAL_GetTick>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eb4:	f7ff fb78 	bl	80015a8 <HAL_GetTick>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0e3      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ec6:	4b74      	ldr	r3, [pc, #464]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d0f1      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ed0:	4b71      	ldr	r3, [pc, #452]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	22f8      	movs	r2, #248	; 0xf8
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	00da      	lsls	r2, r3, #3
 8001ee0:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee6:	e034      	b.n	8001f52 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	3305      	adds	r3, #5
 8001eee:	d111      	bne.n	8001f14 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ef0:	4b69      	ldr	r3, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef4:	4b68      	ldr	r3, [pc, #416]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	438a      	bics	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001efc:	4b66      	ldr	r3, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	22f8      	movs	r2, #248	; 0xf8
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	00da      	lsls	r2, r3, #3
 8001f0c:	4b62      	ldr	r3, [pc, #392]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34
 8001f12:	e01e      	b.n	8001f52 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f14:	4b60      	ldr	r3, [pc, #384]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f18:	4b5f      	ldr	r3, [pc, #380]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f20:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f24:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	438a      	bics	r2, r1
 8001f2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fb3c 	bl	80015a8 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f36:	f7ff fb37 	bl	80015a8 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0a2      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d1f1      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d100      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4e4>
 8001f5a:	e097      	b.n	800208c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5c:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	220c      	movs	r2, #12
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d100      	bne.n	8001f6a <HAL_RCC_OscConfig+0x4f2>
 8001f68:	e06b      	b.n	8002042 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d14c      	bne.n	800200c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b49      	ldr	r3, [pc, #292]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b48      	ldr	r3, [pc, #288]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f78:	494a      	ldr	r1, [pc, #296]	; (80020a4 <HAL_RCC_OscConfig+0x62c>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fb13 	bl	80015a8 <HAL_GetTick>
 8001f82:	0003      	movs	r3, r0
 8001f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff fb0e 	bl	80015a8 <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e079      	b.n	800208e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	4b3f      	ldr	r3, [pc, #252]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	049b      	lsls	r3, r3, #18
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	220f      	movs	r2, #15
 8001fac:	4393      	bics	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb4:	4b38      	ldr	r3, [pc, #224]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fba:	4b37      	ldr	r3, [pc, #220]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <HAL_RCC_OscConfig+0x630>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0449      	lsls	r1, r1, #17
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff fae1 	bl	80015a8 <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff fadc 	bl	80015a8 <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e047      	b.n	800208e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	049b      	lsls	r3, r3, #18
 8002006:	4013      	ands	r3, r2
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x574>
 800200a:	e03f      	b.n	800208c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b22      	ldr	r3, [pc, #136]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8002012:	4924      	ldr	r1, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x62c>)
 8002014:	400a      	ands	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fac6 	bl	80015a8 <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff fac1 	bl	80015a8 <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e02c      	b.n	800208e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	049b      	lsls	r3, r3, #18
 800203c:	4013      	ands	r3, r2
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x5aa>
 8002040:	e024      	b.n	800208c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e01f      	b.n	800208e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x620>)
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	025b      	lsls	r3, r3, #9
 8002060:	401a      	ands	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	429a      	cmp	r2, r3
 8002068:	d10e      	bne.n	8002088 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	220f      	movs	r2, #15
 800206e:	401a      	ands	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	23f0      	movs	r3, #240	; 0xf0
 800207c:	039b      	lsls	r3, r3, #14
 800207e:	401a      	ands	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b008      	add	sp, #32
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	40021000 	.word	0x40021000
 800209c:	00001388 	.word	0x00001388
 80020a0:	efffffff 	.word	0xefffffff
 80020a4:	feffffff 	.word	0xfeffffff
 80020a8:	ffc2ffff 	.word	0xffc2ffff

080020ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0b3      	b.n	8002228 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c0:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <HAL_RCC_ClockConfig+0x184>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d911      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b58      	ldr	r3, [pc, #352]	; (8002230 <HAL_RCC_ClockConfig+0x184>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4393      	bics	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	4b55      	ldr	r3, [pc, #340]	; (8002230 <HAL_RCC_ClockConfig+0x184>)
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e0:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_ClockConfig+0x184>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e09a      	b.n	8002228 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d015      	beq.n	8002128 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2204      	movs	r2, #4
 8002102:	4013      	ands	r3, r2
 8002104:	d006      	beq.n	8002114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 800210c:	21e0      	movs	r1, #224	; 0xe0
 800210e:	00c9      	lsls	r1, r1, #3
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	22f0      	movs	r2, #240	; 0xf0
 800211a:	4393      	bics	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	4b44      	ldr	r3, [pc, #272]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2201      	movs	r2, #1
 800212e:	4013      	ands	r3, r2
 8002130:	d040      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	029b      	lsls	r3, r3, #10
 8002142:	4013      	ands	r3, r2
 8002144:	d114      	bne.n	8002170 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06e      	b.n	8002228 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	049b      	lsls	r3, r3, #18
 800215a:	4013      	ands	r3, r2
 800215c:	d108      	bne.n	8002170 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e062      	b.n	8002228 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2202      	movs	r2, #2
 8002168:	4013      	ands	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e05b      	b.n	8002228 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002170:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2203      	movs	r2, #3
 8002176:	4393      	bics	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 8002180:	430a      	orrs	r2, r1
 8002182:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002184:	f7ff fa10 	bl	80015a8 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218c:	e009      	b.n	80021a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218e:	f7ff fa0b 	bl	80015a8 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <HAL_RCC_ClockConfig+0x18c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e042      	b.n	8002228 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	220c      	movs	r2, #12
 80021a8:	401a      	ands	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1ec      	bne.n	800218e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_RCC_ClockConfig+0x184>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	4013      	ands	r3, r2
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d211      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_ClockConfig+0x184>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4393      	bics	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_ClockConfig+0x184>)
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_RCC_ClockConfig+0x184>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2201      	movs	r2, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e020      	b.n	8002228 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2204      	movs	r2, #4
 80021ec:	4013      	ands	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_RCC_ClockConfig+0x190>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 8002200:	430a      	orrs	r2, r1
 8002202:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002204:	f000 f820 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 8002208:	0001      	movs	r1, r0
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_RCC_ClockConfig+0x188>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	220f      	movs	r2, #15
 8002212:	4013      	ands	r3, r2
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <HAL_RCC_ClockConfig+0x194>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	000a      	movs	r2, r1
 800221a:	40da      	lsrs	r2, r3
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x198>)
 800221e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002220:	2000      	movs	r0, #0
 8002222:	f7ff f97b 	bl	800151c <HAL_InitTick>
  
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b004      	add	sp, #16
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40022000 	.word	0x40022000
 8002234:	40021000 	.word	0x40021000
 8002238:	00001388 	.word	0x00001388
 800223c:	fffff8ff 	.word	0xfffff8ff
 8002240:	08002d38 	.word	0x08002d38
 8002244:	200003c4 	.word	0x200003c4

08002248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b08f      	sub	sp, #60	; 0x3c
 800224c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800224e:	2314      	movs	r3, #20
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002254:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002256:	c313      	stmia	r3!, {r0, r1, r4}
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002260:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002262:	c313      	stmia	r3!, {r0, r1, r4}
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002270:	2300      	movs	r3, #0
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800227c:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc0>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	220c      	movs	r2, #12
 8002286:	4013      	ands	r3, r2
 8002288:	2b04      	cmp	r3, #4
 800228a:	d002      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0x4a>
 800228c:	2b08      	cmp	r3, #8
 800228e:	d003      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x50>
 8002290:	e02d      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002292:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002296:	e02d      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	0c9b      	lsrs	r3, r3, #18
 800229c:	220f      	movs	r2, #15
 800229e:	4013      	ands	r3, r2
 80022a0:	2214      	movs	r2, #20
 80022a2:	18ba      	adds	r2, r7, r2
 80022a4:	5cd3      	ldrb	r3, [r2, r3]
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	220f      	movs	r2, #15
 80022ae:	4013      	ands	r3, r2
 80022b0:	1d3a      	adds	r2, r7, #4
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	025b      	lsls	r3, r3, #9
 80022bc:	4013      	ands	r3, r2
 80022be:	d009      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c2:	4812      	ldr	r0, [pc, #72]	; (800230c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022c4:	f7fd ff20 	bl	8000108 <__udivsi3>
 80022c8:	0003      	movs	r3, r0
 80022ca:	001a      	movs	r2, r3
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	4353      	muls	r3, r2
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
 80022d2:	e009      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d6:	000a      	movs	r2, r1
 80022d8:	0152      	lsls	r2, r2, #5
 80022da:	1a52      	subs	r2, r2, r1
 80022dc:	0193      	lsls	r3, r2, #6
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	185b      	adds	r3, r3, r1
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022ec:	e002      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b00f      	add	sp, #60	; 0x3c
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	08002bd8 	.word	0x08002bd8
 8002304:	08002be8 	.word	0x08002be8
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200

08002310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002314:	4b02      	ldr	r3, [pc, #8]	; (8002320 <HAL_RCC_GetHCLKFreq+0x10>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	200003c4 	.word	0x200003c4

08002324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002328:	f7ff fff2 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 800232c:	0001      	movs	r1, r0
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	2207      	movs	r2, #7
 8002336:	4013      	ands	r3, r2
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_RCC_GetPCLK1Freq+0x28>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	40d9      	lsrs	r1, r3
 800233e:	000b      	movs	r3, r1
}    
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	40021000 	.word	0x40021000
 800234c:	08002d48 	.word	0x08002d48

08002350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	025b      	lsls	r3, r3, #9
 8002368:	4013      	ands	r3, r2
 800236a:	d100      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800236c:	e08e      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2017      	movs	r0, #23
 8002370:	183b      	adds	r3, r7, r0
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	055b      	lsls	r3, r3, #21
 800237e:	4013      	ands	r3, r2
 8002380:	d110      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	0549      	lsls	r1, r1, #21
 800238c:	430a      	orrs	r2, r1
 800238e:	61da      	str	r2, [r3, #28]
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	055b      	lsls	r3, r3, #21
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239e:	183b      	adds	r3, r7, r0
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4013      	ands	r3, r2
 80023ae:	d11a      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b0:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	0049      	lsls	r1, r1, #1
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023be:	f7ff f8f3 	bl	80015a8 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	e008      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7ff f8ee 	bl	80015a8 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e077      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	23c0      	movs	r3, #192	; 0xc0
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d034      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	23c0      	movs	r3, #192	; 0xc0
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4013      	ands	r3, r2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d02c      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002408:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a33      	ldr	r2, [pc, #204]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800240e:	4013      	ands	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002412:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002414:	6a1a      	ldr	r2, [r3, #32]
 8002416:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	0249      	lsls	r1, r1, #9
 800241c:	430a      	orrs	r2, r1
 800241e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002420:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002426:	492e      	ldr	r1, [pc, #184]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002428:	400a      	ands	r2, r1
 800242a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7ff f8b5 	bl	80015a8 <HAL_GetTick>
 800243e:	0003      	movs	r3, r0
 8002440:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002442:	e009      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7ff f8b0 	bl	80015a8 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e038      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	2202      	movs	r2, #2
 800245e:	4013      	ands	r3, r2
 8002460:	d0f0      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002472:	430a      	orrs	r2, r1
 8002474:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002476:	2317      	movs	r3, #23
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002486:	4918      	ldr	r1, [pc, #96]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002488:	400a      	ands	r2, r1
 800248a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	2203      	movs	r2, #3
 800249c:	4393      	bics	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2220      	movs	r2, #32
 80024b0:	4013      	ands	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	2210      	movs	r2, #16
 80024ba:	4393      	bics	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b006      	add	sp, #24
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	fffffcff 	.word	0xfffffcff
 80024e0:	fffeffff 	.word	0xfffeffff
 80024e4:	00001388 	.word	0x00001388
 80024e8:	efffffff 	.word	0xefffffff

080024ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e044      	b.n	8002588 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002502:	2b00      	cmp	r3, #0
 8002504:	d107      	bne.n	8002516 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2274      	movs	r2, #116	; 0x74
 800250a:	2100      	movs	r1, #0
 800250c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	0018      	movs	r0, r3
 8002512:	f7fe ff5b 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2224      	movs	r2, #36	; 0x24
 800251a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2101      	movs	r1, #1
 8002528:	438a      	bics	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	0018      	movs	r0, r3
 8002530:	f000 f830 	bl	8002594 <UART_SetConfig>
 8002534:	0003      	movs	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e024      	b.n	8002588 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f000 f94d 	bl	80027e8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	490d      	ldr	r1, [pc, #52]	; (8002590 <HAL_UART_Init+0xa4>)
 800255a:	400a      	ands	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	212a      	movs	r1, #42	; 0x2a
 800256a:	438a      	bics	r2, r1
 800256c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f9e5 	bl	8002950 <UART_CheckIdleState>
 8002586:	0003      	movs	r3, r0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	ffffb7ff 	.word	0xffffb7ff

08002594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800259c:	231e      	movs	r3, #30
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a84      	ldr	r2, [pc, #528]	; (80027d4 <UART_SetConfig+0x240>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a7f      	ldr	r2, [pc, #508]	; (80027d8 <UART_SetConfig+0x244>)
 80025da:	4013      	ands	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a76      	ldr	r2, [pc, #472]	; (80027dc <UART_SetConfig+0x248>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	430a      	orrs	r2, r1
 800260e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002610:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <UART_SetConfig+0x24c>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	2203      	movs	r2, #3
 8002616:	4013      	ands	r3, r2
 8002618:	2b03      	cmp	r3, #3
 800261a:	d00d      	beq.n	8002638 <UART_SetConfig+0xa4>
 800261c:	d81b      	bhi.n	8002656 <UART_SetConfig+0xc2>
 800261e:	2b02      	cmp	r3, #2
 8002620:	d014      	beq.n	800264c <UART_SetConfig+0xb8>
 8002622:	d818      	bhi.n	8002656 <UART_SetConfig+0xc2>
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <UART_SetConfig+0x9a>
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00a      	beq.n	8002642 <UART_SetConfig+0xae>
 800262c:	e013      	b.n	8002656 <UART_SetConfig+0xc2>
 800262e:	231f      	movs	r3, #31
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e012      	b.n	800265e <UART_SetConfig+0xca>
 8002638:	231f      	movs	r3, #31
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2202      	movs	r2, #2
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e00d      	b.n	800265e <UART_SetConfig+0xca>
 8002642:	231f      	movs	r3, #31
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	2204      	movs	r2, #4
 8002648:	701a      	strb	r2, [r3, #0]
 800264a:	e008      	b.n	800265e <UART_SetConfig+0xca>
 800264c:	231f      	movs	r3, #31
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2208      	movs	r2, #8
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e003      	b.n	800265e <UART_SetConfig+0xca>
 8002656:	231f      	movs	r3, #31
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	2210      	movs	r2, #16
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	429a      	cmp	r2, r3
 800266a:	d15d      	bne.n	8002728 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 800266c:	231f      	movs	r3, #31
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b08      	cmp	r3, #8
 8002674:	d015      	beq.n	80026a2 <UART_SetConfig+0x10e>
 8002676:	dc18      	bgt.n	80026aa <UART_SetConfig+0x116>
 8002678:	2b04      	cmp	r3, #4
 800267a:	d00d      	beq.n	8002698 <UART_SetConfig+0x104>
 800267c:	dc15      	bgt.n	80026aa <UART_SetConfig+0x116>
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <UART_SetConfig+0xf4>
 8002682:	2b02      	cmp	r3, #2
 8002684:	d005      	beq.n	8002692 <UART_SetConfig+0xfe>
 8002686:	e010      	b.n	80026aa <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002688:	f7ff fe4c 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 800268c:	0003      	movs	r3, r0
 800268e:	61bb      	str	r3, [r7, #24]
        break;
 8002690:	e012      	b.n	80026b8 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002692:	4b54      	ldr	r3, [pc, #336]	; (80027e4 <UART_SetConfig+0x250>)
 8002694:	61bb      	str	r3, [r7, #24]
        break;
 8002696:	e00f      	b.n	80026b8 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002698:	f7ff fdd6 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 800269c:	0003      	movs	r3, r0
 800269e:	61bb      	str	r3, [r7, #24]
        break;
 80026a0:	e00a      	b.n	80026b8 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	61bb      	str	r3, [r7, #24]
        break;
 80026a8:	e006      	b.n	80026b8 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026ae:	231e      	movs	r3, #30
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
        break;
 80026b6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d100      	bne.n	80026c0 <UART_SetConfig+0x12c>
 80026be:	e07b      	b.n	80027b8 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	005a      	lsls	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	18d2      	adds	r2, r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0019      	movs	r1, r3
 80026d2:	0010      	movs	r0, r2
 80026d4:	f7fd fd18 	bl	8000108 <__udivsi3>
 80026d8:	0003      	movs	r3, r0
 80026da:	b29b      	uxth	r3, r3
 80026dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d91c      	bls.n	800271e <UART_SetConfig+0x18a>
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	025b      	lsls	r3, r3, #9
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d217      	bcs.n	800271e <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	200e      	movs	r0, #14
 80026f4:	183b      	adds	r3, r7, r0
 80026f6:	210f      	movs	r1, #15
 80026f8:	438a      	bics	r2, r1
 80026fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	b29b      	uxth	r3, r3
 8002702:	2207      	movs	r2, #7
 8002704:	4013      	ands	r3, r2
 8002706:	b299      	uxth	r1, r3
 8002708:	183b      	adds	r3, r7, r0
 800270a:	183a      	adds	r2, r7, r0
 800270c:	8812      	ldrh	r2, [r2, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	183a      	adds	r2, r7, r0
 8002718:	8812      	ldrh	r2, [r2, #0]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	e04c      	b.n	80027b8 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 800271e:	231e      	movs	r3, #30
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e047      	b.n	80027b8 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002728:	231f      	movs	r3, #31
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d015      	beq.n	800275e <UART_SetConfig+0x1ca>
 8002732:	dc18      	bgt.n	8002766 <UART_SetConfig+0x1d2>
 8002734:	2b04      	cmp	r3, #4
 8002736:	d00d      	beq.n	8002754 <UART_SetConfig+0x1c0>
 8002738:	dc15      	bgt.n	8002766 <UART_SetConfig+0x1d2>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <UART_SetConfig+0x1b0>
 800273e:	2b02      	cmp	r3, #2
 8002740:	d005      	beq.n	800274e <UART_SetConfig+0x1ba>
 8002742:	e010      	b.n	8002766 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002744:	f7ff fdee 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8002748:	0003      	movs	r3, r0
 800274a:	61bb      	str	r3, [r7, #24]
        break;
 800274c:	e012      	b.n	8002774 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800274e:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <UART_SetConfig+0x250>)
 8002750:	61bb      	str	r3, [r7, #24]
        break;
 8002752:	e00f      	b.n	8002774 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002754:	f7ff fd78 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 8002758:	0003      	movs	r3, r0
 800275a:	61bb      	str	r3, [r7, #24]
        break;
 800275c:	e00a      	b.n	8002774 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	61bb      	str	r3, [r7, #24]
        break;
 8002764:	e006      	b.n	8002774 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800276a:	231e      	movs	r3, #30
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
        break;
 8002772:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01e      	beq.n	80027b8 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	085a      	lsrs	r2, r3, #1
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	18d2      	adds	r2, r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0019      	movs	r1, r3
 800278a:	0010      	movs	r0, r2
 800278c:	f7fd fcbc 	bl	8000108 <__udivsi3>
 8002790:	0003      	movs	r3, r0
 8002792:	b29b      	uxth	r3, r3
 8002794:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d909      	bls.n	80027b0 <UART_SetConfig+0x21c>
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	025b      	lsls	r3, r3, #9
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d204      	bcs.n	80027b0 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	e003      	b.n	80027b8 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80027b0:	231e      	movs	r3, #30
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027c4:	231e      	movs	r3, #30
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	781b      	ldrb	r3, [r3, #0]
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b008      	add	sp, #32
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	ffff69f3 	.word	0xffff69f3
 80027d8:	ffffcfff 	.word	0xffffcfff
 80027dc:	fffff4ff 	.word	0xfffff4ff
 80027e0:	40021000 	.word	0x40021000
 80027e4:	007a1200 	.word	0x007a1200

080027e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2201      	movs	r2, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	d00b      	beq.n	8002812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a4a      	ldr	r2, [pc, #296]	; (800292c <UART_AdvFeatureConfig+0x144>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d00b      	beq.n	8002834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a43      	ldr	r2, [pc, #268]	; (8002930 <UART_AdvFeatureConfig+0x148>)
 8002824:	4013      	ands	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2204      	movs	r2, #4
 800283a:	4013      	ands	r3, r2
 800283c:	d00b      	beq.n	8002856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a3b      	ldr	r2, [pc, #236]	; (8002934 <UART_AdvFeatureConfig+0x14c>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2208      	movs	r2, #8
 800285c:	4013      	ands	r3, r2
 800285e:	d00b      	beq.n	8002878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a34      	ldr	r2, [pc, #208]	; (8002938 <UART_AdvFeatureConfig+0x150>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2210      	movs	r2, #16
 800287e:	4013      	ands	r3, r2
 8002880:	d00b      	beq.n	800289a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a2c      	ldr	r2, [pc, #176]	; (800293c <UART_AdvFeatureConfig+0x154>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2220      	movs	r2, #32
 80028a0:	4013      	ands	r3, r2
 80028a2:	d00b      	beq.n	80028bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	4a25      	ldr	r2, [pc, #148]	; (8002940 <UART_AdvFeatureConfig+0x158>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2240      	movs	r2, #64	; 0x40
 80028c2:	4013      	ands	r3, r2
 80028c4:	d01d      	beq.n	8002902 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <UART_AdvFeatureConfig+0x15c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	035b      	lsls	r3, r3, #13
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10b      	bne.n	8002902 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a15      	ldr	r2, [pc, #84]	; (8002948 <UART_AdvFeatureConfig+0x160>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	0019      	movs	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	4013      	ands	r3, r2
 800290a:	d00b      	beq.n	8002924 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <UART_AdvFeatureConfig+0x164>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
  }
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}
 800292c:	fffdffff 	.word	0xfffdffff
 8002930:	fffeffff 	.word	0xfffeffff
 8002934:	fffbffff 	.word	0xfffbffff
 8002938:	ffff7fff 	.word	0xffff7fff
 800293c:	ffffefff 	.word	0xffffefff
 8002940:	ffffdfff 	.word	0xffffdfff
 8002944:	ffefffff 	.word	0xffefffff
 8002948:	ff9fffff 	.word	0xff9fffff
 800294c:	fff7ffff 	.word	0xfff7ffff

08002950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af02      	add	r7, sp, #8
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	2100      	movs	r1, #0
 800295e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002960:	f7fe fe22 	bl	80015a8 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2208      	movs	r2, #8
 8002970:	4013      	ands	r3, r2
 8002972:	2b08      	cmp	r3, #8
 8002974:	d10c      	bne.n	8002990 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0391      	lsls	r1, r2, #14
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <UART_CheckIdleState+0x8c>)
 8002980:	9200      	str	r2, [sp, #0]
 8002982:	2200      	movs	r2, #0
 8002984:	f000 f82c 	bl	80029e0 <UART_WaitOnFlagUntilTimeout>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d001      	beq.n	8002990 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e021      	b.n	80029d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2204      	movs	r2, #4
 8002998:	4013      	ands	r3, r2
 800299a:	2b04      	cmp	r3, #4
 800299c:	d10c      	bne.n	80029b8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	03d1      	lsls	r1, r2, #15
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <UART_CheckIdleState+0x8c>)
 80029a8:	9200      	str	r2, [sp, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f000 f818 	bl	80029e0 <UART_WaitOnFlagUntilTimeout>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d001      	beq.n	80029b8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e00d      	b.n	80029d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2274      	movs	r2, #116	; 0x74
 80029ce:	2100      	movs	r1, #0
 80029d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b004      	add	sp, #16
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	01ffffff 	.word	0x01ffffff

080029e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b094      	sub	sp, #80	; 0x50
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f0:	e0a3      	b.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f4:	3301      	adds	r3, #1
 80029f6:	d100      	bne.n	80029fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80029f8:	e09f      	b.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fe fdd5 	bl	80015a8 <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d13d      	bne.n	8002a8c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a10:	f3ef 8310 	mrs	r3, PRIMASK
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a18:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	f383 8810 	msr	PRIMASK, r3
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	494c      	ldr	r1, [pc, #304]	; (8002b64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a38:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	f383 8810 	msr	PRIMASK, r3
}
 8002a40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a42:	f3ef 8310 	mrs	r3, PRIMASK
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	f383 8810 	msr	PRIMASK, r3
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2101      	movs	r1, #1
 8002a64:	438a      	bics	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6e:	f383 8810 	msr	PRIMASK, r3
}
 8002a72:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2274      	movs	r2, #116	; 0x74
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e067      	b.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2204      	movs	r2, #4
 8002a94:	4013      	ands	r3, r2
 8002a96:	d050      	beq.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d146      	bne.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2280      	movs	r2, #128	; 0x80
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aba:	613b      	str	r3, [r7, #16]
  return(result);
 8002abc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4923      	ldr	r1, [pc, #140]	; (8002b64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ade:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f383 8810 	msr	PRIMASK, r3
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8002aec:	61fb      	str	r3, [r7, #28]
  return(result);
 8002aee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002af2:	2301      	movs	r3, #1
 8002af4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	438a      	bics	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f383 8810 	msr	PRIMASK, r3
}
 8002b18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	2120      	movs	r1, #32
 8002b2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2274      	movs	r2, #116	; 0x74
 8002b32:	2100      	movs	r1, #0
 8002b34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e010      	b.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	4013      	ands	r3, r2
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	425a      	negs	r2, r3
 8002b4a:	4153      	adcs	r3, r2
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	001a      	movs	r2, r3
 8002b50:	1dfb      	adds	r3, r7, #7
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d100      	bne.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002b58:	e74b      	b.n	80029f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b014      	add	sp, #80	; 0x50
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	fffffe5f 	.word	0xfffffe5f

08002b68 <__libc_init_array>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	4d0c      	ldr	r5, [pc, #48]	; (8002ba0 <__libc_init_array+0x38>)
 8002b6e:	4c0d      	ldr	r4, [pc, #52]	; (8002ba4 <__libc_init_array+0x3c>)
 8002b70:	1b64      	subs	r4, r4, r5
 8002b72:	10a4      	asrs	r4, r4, #2
 8002b74:	42a6      	cmp	r6, r4
 8002b76:	d109      	bne.n	8002b8c <__libc_init_array+0x24>
 8002b78:	2600      	movs	r6, #0
 8002b7a:	f000 f821 	bl	8002bc0 <_init>
 8002b7e:	4d0a      	ldr	r5, [pc, #40]	; (8002ba8 <__libc_init_array+0x40>)
 8002b80:	4c0a      	ldr	r4, [pc, #40]	; (8002bac <__libc_init_array+0x44>)
 8002b82:	1b64      	subs	r4, r4, r5
 8002b84:	10a4      	asrs	r4, r4, #2
 8002b86:	42a6      	cmp	r6, r4
 8002b88:	d105      	bne.n	8002b96 <__libc_init_array+0x2e>
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	00b3      	lsls	r3, r6, #2
 8002b8e:	58eb      	ldr	r3, [r5, r3]
 8002b90:	4798      	blx	r3
 8002b92:	3601      	adds	r6, #1
 8002b94:	e7ee      	b.n	8002b74 <__libc_init_array+0xc>
 8002b96:	00b3      	lsls	r3, r6, #2
 8002b98:	58eb      	ldr	r3, [r5, r3]
 8002b9a:	4798      	blx	r3
 8002b9c:	3601      	adds	r6, #1
 8002b9e:	e7f2      	b.n	8002b86 <__libc_init_array+0x1e>
 8002ba0:	08002d50 	.word	0x08002d50
 8002ba4:	08002d50 	.word	0x08002d50
 8002ba8:	08002d50 	.word	0x08002d50
 8002bac:	08002d54 	.word	0x08002d54

08002bb0 <memset>:
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	1882      	adds	r2, r0, r2
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d100      	bne.n	8002bba <memset+0xa>
 8002bb8:	4770      	bx	lr
 8002bba:	7019      	strb	r1, [r3, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	e7f9      	b.n	8002bb4 <memset+0x4>

08002bc0 <_init>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr

08002bcc <_fini>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr
