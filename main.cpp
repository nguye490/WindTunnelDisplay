/* mbed Microcontroller Library
 * Copyright (c) 2019 ARM Limited
 * SPDX-License-Identifier: Apache-2.0
 */

#include "mbed.h"


int NUMBER9[] = {0b11110001,
                 0b10010001,
                 0b10010001, 
                 0b10010001, 
                 0b11111111};
int NUMBER8[] = {0b01101110, 
                 0b10010001,
                 0b10010001, 
                 0b10010001, 
                 0b01101110};
int NUMBER7[] = {0b10000000, 
                 0b10001000, 
                 0b10001000, 
                 0b10011111, 
                 0b11101000};
int NUMBER6[] = {0b11111111, 
                 0b10001001, 
                 0b10001001, 
                 0b10001001, 
                 0b10001111};
int NUMBER5[] = {0b11111001, 
                 0b10001001, 
                 0b10001001, 
                 0b10001001, 
                 0b10001111};
int NUMBER4[] = {0b11110000, 
                 0b00010000, 
                 0b00010000, 
                 0b00010000, 
                 0b11111111};
int NUMBER3[] = {0b10010001, 
                 0b10010001, 
                 0b10010001, 
                 0b10010001, 
                 0b11111111};
int NUMBER2[] = {0b10000011, 
                 0b10000101, 
                 0b10001001, 
                 0b10010001, 
                 0b01100001};
int NUMBER1[] = {0b00100000, 
                 0b01000000, 
                 0b11111111, 
                 0b00000000, 
                 0b00000000};
int NUMBER0[] = {0b11111111, 
                 0b10000001, 
                 0b10000001, 
                 0b10000001, 
                 0b11111111};

int _[] = {0b00000000, 
           0b00000000, 
           0b00000000, 
           0b00000000, 
           0b00000000};
int A[] = {0b11111111, 
           0b10010000, 
           0b10010000, 
           0b10010000, 
           0b11111111};
int B[] = {0b11111111, 
           0b10010001, 
           0b10010001, 
           0b10010001, 
           0b01101110};
int C[] = {0b00111100, 
           0b01000010, 
           0b10000001, 
           0b10000001, 
           0b10000001};
int D[] = {0b11111111, 
           0b10000001, 
           0b10000001, 
           0b01000010, 
           0b00111100};
int E[] = {0b11111111, 
           0b10010001, 
           0b10010001, 
           0b10010001, 
           0b10010001};
int F[] = {0b11111111,
           0b10010000, 
           0b10010000, 
           0b10010000, 
           0b10010000};
int G[] = {0b01111111, 
           0b10000001, 
           0b10001001, 
           0b10001001, 
           0b10001110};
int H[] = {0b11111111, 
           0b00001000, 
           0b00001000, 
           0b00001000, 
           0b11111111};
int I[] = {0b10000001, 
           0b10000001, 
           0b11111111, 
           0b10000001, 
           0b10000001};
int J[] = {0b00000110, 
           0b00001001, 
           0b00000001, 
           0b00000001, 
           0b11111110};
int K[] = {0b11111111,
           0b00011000, 
           0b00100100, 
           0b01000010, 
           0b10000001};
int L[] = {0b11111111,
           0b00000001, 
           0b00000001, 
           0b00000001, 
           0b00000001};
int M[] = {0b11111111, 
           0b01000000, 
           0b00100000, 
           0b01000000, 
           0b11111111};
int N[] = {0b11111111, 
           0b00100000, 
           0b00011000, 
           0b00000100, 
           0b11111111};
int O[] = {0b01111110, 
           0b10000001, 
           0b10000001, 
           0b10000001, 
           0b01111110};
int P[] = {0b11111111, 
           0b10010000, 
           0b10010000, 
           0b10010000, 
           0b01100000};
int Q[] = {0b01111110, 
           0b10000001, 
           0b10000101, 
           0b01111110, 
           0b00000001};
int R[] = {0b11111111, 
           0b10011000, 
           0b10010100, 
           0b10010010, 
           0b01100001};
int S[] = {0b01110001, 
           0b10001001, 
           0b10001001, 
           0b10001001, 
           0b10001110};
int T[] = {0b10000000, 
           0b10000000, 
           0b11111111, 
           0b10000000, 
           0b10000000};
int U[] = {0b11111110, 
           0b00000001, 
           0b00000001, 
           0b00000001, 
           0b11111110};
int V[] = {0b11111100, 
           0b00000010, 
           0b00000001, 
           0b00000010, 
           0b11111100};
int W[] = {0b11111111, 
           0b00000010, 
           0b00000100, 
           0b00000010, 
           0b11111111};
int X[] = {0b11000011, 
           0b00100100, 
           0b00011000, 
           0b00100100, 
           0b11000011};
int Y[] = {0b11000000, 
           0b00100000, 
           0b00011111, 
           0b00100000, 
           0b11000000};
int Z[] = {0b10000111, 
           0b10001001, 
           0b10010001, 
           0b10100001, 
           0b11000001};

int letterSpace = 6;
int dotTime = 1;

//Hal Sensor interrupt
InterruptIn hSensor(D13);

//Set leds to whatever output pins you have in place
BusOut myleds(D2,D3,D4,D5,D6,D7,D8,D9);

// defining the space between the letters (ms)

// defining the time dots appear (ms)
 
void printLetter(int letter[]){
    int y;
    // printing the rows of each letter
    for (y = 0; y < 5; y++){
        myleds.write(letter[y]);
        ThisThread::sleep_for(dotTime);
    }
    ThisThread::sleep_for(letterSpace);
}

void loop(){
    printLetter (H);
    printLetter (E);
    printLetter (L);
    printLetter (L);
    printLetter (O);
    printLetter (_);
    printLetter (A);
    printLetter (L);
    printLetter (L);
}

int main(){
    while (true) {
        hSensor.rise(&loop());
        __WFI();
    }
}